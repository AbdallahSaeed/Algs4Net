<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Algs4Net Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Algs4Net namespace" /><meta name="Microsoft.Help.F1" content="Algs4Net" /><meta name="Microsoft.Help.Id" content="N:Algs4Net" /><meta name="Description" content=" " /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="Algs4Net" /><meta name="file" content="N_Algs4Net" /><meta name="guid" content="N_Algs4Net" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Algs4Net Class Library Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="N_Algs4Net.htm" title="Algs4Net Class Library Documentation" tocid="roottoc">Algs4Net Class Library Documentation</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="N_Algs4Net.htm" title="Algs4Net" tocid="N_Algs4Net">Algs4Net</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Accumulator.htm" title="Accumulator Class" tocid="T_Algs4Net_Accumulator">Accumulator Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_AcyclicLP.htm" title="AcyclicLP Class" tocid="T_Algs4Net_AcyclicLP">AcyclicLP Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_AcyclicSP.htm" title="AcyclicSP Class" tocid="T_Algs4Net_AcyclicSP">AcyclicSP Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_AdjMatrixEdgeWeightedDigraph.htm" title="AdjMatrixEdgeWeightedDigraph Class" tocid="T_Algs4Net_AdjMatrixEdgeWeightedDigraph">AdjMatrixEdgeWeightedDigraph Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Alphabet.htm" title="Alphabet Class" tocid="T_Algs4Net_Alphabet">Alphabet Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Animation.htm" title="Animation Class" tocid="T_Algs4Net_Animation">Animation Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Arbitrage.htm" title="Arbitrage Class" tocid="T_Algs4Net_Arbitrage">Arbitrage Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_AssignmentProblem.htm" title="AssignmentProblem Class" tocid="T_Algs4Net_AssignmentProblem">AssignmentProblem Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Average.htm" title="Average Class" tocid="T_Algs4Net_Average">Average Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Bag_1.htm" title="Bag(Item) Class" tocid="T_Algs4Net_Bag_1">Bag(Item) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BasicVisual.htm" title="BasicVisual Class" tocid="T_Algs4Net_BasicVisual">BasicVisual Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BellmanFordSP.htm" title="BellmanFordSP Class" tocid="T_Algs4Net_BellmanFordSP">BellmanFordSP Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BinaryDump.htm" title="BinaryDump Class" tocid="T_Algs4Net_BinaryDump">BinaryDump Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BinaryInput.htm" title="BinaryInput Class" tocid="T_Algs4Net_BinaryInput">BinaryInput Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BinaryInsertion.htm" title="BinaryInsertion Class" tocid="T_Algs4Net_BinaryInsertion">BinaryInsertion Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BinaryOutput.htm" title="BinaryOutput Class" tocid="T_Algs4Net_BinaryOutput">BinaryOutput Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BinarySearch.htm" title="BinarySearch Class" tocid="T_Algs4Net_BinarySearch">BinarySearch Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BinarySearchST_2.htm" title="BinarySearchST(Key, Value) Class" tocid="T_Algs4Net_BinarySearchST_2">BinarySearchST(Key, Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Bipartite.htm" title="Bipartite Class" tocid="T_Algs4Net_Bipartite">Bipartite Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BipartiteMatching.htm" title="BipartiteMatching Class" tocid="T_Algs4Net_BipartiteMatching">BipartiteMatching Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BipartiteX.htm" title="BipartiteX Class" tocid="T_Algs4Net_BipartiteX">BipartiteX Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BlackFilter.htm" title="BlackFilter Class" tocid="T_Algs4Net_BlackFilter">BlackFilter Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BoruvkaMST.htm" title="BoruvkaMST Class" tocid="T_Algs4Net_BoruvkaMST">BoruvkaMST Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BoyerMoore.htm" title="BoyerMoore Class" tocid="T_Algs4Net_BoyerMoore">BoyerMoore Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BreadthFirstDirectedPaths.htm" title="BreadthFirstDirectedPaths Class" tocid="T_Algs4Net_BreadthFirstDirectedPaths">BreadthFirstDirectedPaths Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BreadthFirstPaths.htm" title="BreadthFirstPaths Class" tocid="T_Algs4Net_BreadthFirstPaths">BreadthFirstPaths Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BST_2.htm" title="BST(Key, Value) Class" tocid="T_Algs4Net_BST_2">BST(Key, Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_BTree_2.htm" title="BTree(Key, Value) Class" tocid="T_Algs4Net_BTree_2">BTree(Key, Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Cat.htm" title="Cat Class" tocid="T_Algs4Net_Cat">Cat Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_CC.htm" title="CC Class" tocid="T_Algs4Net_CC">CC Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_ClosestPair.htm" title="ClosestPair Class" tocid="T_Algs4Net_ClosestPair">ClosestPair Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_CollisionSystem.htm" title="CollisionSystem Class" tocid="T_Algs4Net_CollisionSystem">CollisionSystem Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Complex.htm" title="Complex Class" tocid="T_Algs4Net_Complex">Complex Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Count.htm" title="Count Class" tocid="T_Algs4Net_Count">Count Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Counter.htm" title="Counter Class" tocid="T_Algs4Net_Counter">Counter Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_CPM.htm" title="CPM Class" tocid="T_Algs4Net_CPM">CPM Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Cycle.htm" title="Cycle Class" tocid="T_Algs4Net_Cycle">Cycle Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Date.htm" title="Date Class" tocid="T_Algs4Net_Date">Date Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DeDup.htm" title="DeDup Class" tocid="T_Algs4Net_DeDup">DeDup Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DegreesOfSeparation.htm" title="DegreesOfSeparation Class" tocid="T_Algs4Net_DegreesOfSeparation">DegreesOfSeparation Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DepthFirstDirectedPaths.htm" title="DepthFirstDirectedPaths Class" tocid="T_Algs4Net_DepthFirstDirectedPaths">DepthFirstDirectedPaths Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DepthFirstOrder.htm" title="DepthFirstOrder Class" tocid="T_Algs4Net_DepthFirstOrder">DepthFirstOrder Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DepthFirstPaths.htm" title="DepthFirstPaths Class" tocid="T_Algs4Net_DepthFirstPaths">DepthFirstPaths Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DepthFirstSearch.htm" title="DepthFirstSearch Class" tocid="T_Algs4Net_DepthFirstSearch">DepthFirstSearch Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Digraph.htm" title="Digraph Class" tocid="T_Algs4Net_Digraph">Digraph Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DigraphGenerator.htm" title="DigraphGenerator Class" tocid="T_Algs4Net_DigraphGenerator">DigraphGenerator Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DijkstraAllPairsSP.htm" title="DijkstraAllPairsSP Class" tocid="T_Algs4Net_DijkstraAllPairsSP">DijkstraAllPairsSP Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DijkstraSP.htm" title="DijkstraSP Class" tocid="T_Algs4Net_DijkstraSP">DijkstraSP Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DijkstraUndirectedSP.htm" title="DijkstraUndirectedSP Class" tocid="T_Algs4Net_DijkstraUndirectedSP">DijkstraUndirectedSP Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DirectedCycle.htm" title="DirectedCycle Class" tocid="T_Algs4Net_DirectedCycle">DirectedCycle Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DirectedCycleX.htm" title="DirectedCycleX Class" tocid="T_Algs4Net_DirectedCycleX">DirectedCycleX Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DirectedDFS.htm" title="DirectedDFS Class" tocid="T_Algs4Net_DirectedDFS">DirectedDFS Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DirectedEdge.htm" title="DirectedEdge Class" tocid="T_Algs4Net_DirectedEdge">DirectedEdge Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DirectedEulerianCycle.htm" title="DirectedEulerianCycle Class" tocid="T_Algs4Net_DirectedEulerianCycle">DirectedEulerianCycle Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DirectedEulerianPath.htm" title="DirectedEulerianPath Class" tocid="T_Algs4Net_DirectedEulerianPath">DirectedEulerianPath Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DoublingRatio.htm" title="DoublingRatio Class" tocid="T_Algs4Net_DoublingRatio">DoublingRatio Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DoublingTest.htm" title="DoublingTest Class" tocid="T_Algs4Net_DoublingTest">DoublingTest Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_DrawingWindow.htm" title="DrawingWindow Class" tocid="T_Algs4Net_DrawingWindow">DrawingWindow Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Edge.htm" title="Edge Class" tocid="T_Algs4Net_Edge">Edge Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_EdgeWeightedDigraph.htm" title="EdgeWeightedDigraph Class" tocid="T_Algs4Net_EdgeWeightedDigraph">EdgeWeightedDigraph Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_EdgeWeightedDirectedCycle.htm" title="EdgeWeightedDirectedCycle Class" tocid="T_Algs4Net_EdgeWeightedDirectedCycle">EdgeWeightedDirectedCycle Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_EdgeWeightedGraph.htm" title="EdgeWeightedGraph Class" tocid="T_Algs4Net_EdgeWeightedGraph">EdgeWeightedGraph Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_EulerianCycle.htm" title="EulerianCycle Class" tocid="T_Algs4Net_EulerianCycle">EulerianCycle Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_EulerianPath.htm" title="EulerianPath Class" tocid="T_Algs4Net_EulerianPath">EulerianPath Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_FarthestPair.htm" title="FarthestPair Class" tocid="T_Algs4Net_FarthestPair">FarthestPair Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_FFT.htm" title="FFT Class" tocid="T_Algs4Net_FFT">FFT Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_FileIndex.htm" title="FileIndex Class" tocid="T_Algs4Net_FileIndex">FileIndex Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_FlowEdge.htm" title="FlowEdge Class" tocid="T_Algs4Net_FlowEdge">FlowEdge Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_FlowNetwork.htm" title="FlowNetwork Class" tocid="T_Algs4Net_FlowNetwork">FlowNetwork Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_FloydWarshall.htm" title="FloydWarshall Class" tocid="T_Algs4Net_FloydWarshall">FloydWarshall Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_FordFulkerson.htm" title="FordFulkerson Class" tocid="T_Algs4Net_FordFulkerson">FordFulkerson Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_FrequencyCounter.htm" title="FrequencyCounter Class" tocid="T_Algs4Net_FrequencyCounter">FrequencyCounter Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_GabowSCC.htm" title="GabowSCC Class" tocid="T_Algs4Net_GabowSCC">GabowSCC Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_GaussianElimination.htm" title="GaussianElimination Class" tocid="T_Algs4Net_GaussianElimination">GaussianElimination Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_GaussJordanElimination.htm" title="GaussJordanElimination Class" tocid="T_Algs4Net_GaussJordanElimination">GaussJordanElimination Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Genome.htm" title="Genome Class" tocid="T_Algs4Net_Genome">Genome Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_GrahamScan.htm" title="GrahamScan Class" tocid="T_Algs4Net_GrahamScan">GrahamScan Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Graph.htm" title="Graph Class" tocid="T_Algs4Net_Graph">Graph Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_GraphGenerator.htm" title="GraphGenerator Class" tocid="T_Algs4Net_GraphGenerator">GraphGenerator Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_GREP.htm" title="GREP Class" tocid="T_Algs4Net_GREP">GREP Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Heap.htm" title="Heap Class" tocid="T_Algs4Net_Heap">Heap Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_HelpTextAttribute.htm" title="HelpTextAttribute Class" tocid="T_Algs4Net_HelpTextAttribute">HelpTextAttribute Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_HexDump.htm" title="HexDump Class" tocid="T_Algs4Net_HexDump">HexDump Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_HopcroftKarp.htm" title="HopcroftKarp Class" tocid="T_Algs4Net_HopcroftKarp">HopcroftKarp Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Huffman.htm" title="Huffman Class" tocid="T_Algs4Net_Huffman">Huffman Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_IndexMaxPQ_1.htm" title="IndexMaxPQ(Key) Class" tocid="T_Algs4Net_IndexMaxPQ_1">IndexMaxPQ(Key) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_IndexMinPQ_1.htm" title="IndexMinPQ(Key) Class" tocid="T_Algs4Net_IndexMinPQ_1">IndexMinPQ(Key) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Insertion.htm" title="Insertion Class" tocid="T_Algs4Net_Insertion">Insertion Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_InsertionX.htm" title="InsertionX Class" tocid="T_Algs4Net_InsertionX">InsertionX Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Interval1D.htm" title="Interval1D Class" tocid="T_Algs4Net_Interval1D">Interval1D Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Interval2D.htm" title="Interval2D Class" tocid="T_Algs4Net_Interval2D">Interval2D Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_KMP.htm" title="KMP Class" tocid="T_Algs4Net_KMP">KMP Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Knuth.htm" title="Knuth Class" tocid="T_Algs4Net_Knuth">Knuth Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_KosarajuSharirSCC.htm" title="KosarajuSharirSCC Class" tocid="T_Algs4Net_KosarajuSharirSCC">KosarajuSharirSCC Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_KruskalMST.htm" title="KruskalMST Class" tocid="T_Algs4Net_KruskalMST">KruskalMST Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_KWIK.htm" title="KWIK Class" tocid="T_Algs4Net_KWIK">KWIK Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LazyPrimMST.htm" title="LazyPrimMST Class" tocid="T_Algs4Net_LazyPrimMST">LazyPrimMST Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LinearProbingHashST_2.htm" title="LinearProbingHashST(Key, Value) Class" tocid="T_Algs4Net_LinearProbingHashST_2">LinearProbingHashST(Key, Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LinearProgramming.htm" title="LinearProgramming Class" tocid="T_Algs4Net_LinearProgramming">LinearProgramming Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LinearRegression.htm" title="LinearRegression Class" tocid="T_Algs4Net_LinearRegression">LinearRegression Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LinkedQueue_1.htm" title="LinkedQueue(Item) Class" tocid="T_Algs4Net_LinkedQueue_1">LinkedQueue(Item) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LinkedStack_1.htm" title="LinkedStack(Item) Class" tocid="T_Algs4Net_LinkedStack_1">LinkedStack(Item) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LongestCommonSubstring.htm" title="LongestCommonSubstring Class" tocid="T_Algs4Net_LongestCommonSubstring">LongestCommonSubstring Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LongestRepeatedSubstring.htm" title="LongestRepeatedSubstring Class" tocid="T_Algs4Net_LongestRepeatedSubstring">LongestRepeatedSubstring Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LookupCSV.htm" title="LookupCSV Class" tocid="T_Algs4Net_LookupCSV">LookupCSV Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LookupIndex.htm" title="LookupIndex Class" tocid="T_Algs4Net_LookupIndex">LookupIndex Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LSD.htm" title="LSD Class" tocid="T_Algs4Net_LSD">LSD Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_LZW.htm" title="LZW Class" tocid="T_Algs4Net_LZW">LZW Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_MaxPQ_1.htm" title="MaxPQ(Key) Class" tocid="T_Algs4Net_MaxPQ_1">MaxPQ(Key) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Merge.htm" title="Merge Class" tocid="T_Algs4Net_Merge">Merge Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_MergeBU.htm" title="MergeBU Class" tocid="T_Algs4Net_MergeBU">MergeBU Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_MergeX.htm" title="MergeX Class" tocid="T_Algs4Net_MergeX">MergeX Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_MinPQ_1.htm" title="MinPQ(Key) Class" tocid="T_Algs4Net_MinPQ_1">MinPQ(Key) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_MSD.htm" title="MSD Class" tocid="T_Algs4Net_MSD">MSD Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Multiway.htm" title="Multiway Class" tocid="T_Algs4Net_Multiway">Multiway Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_NFA.htm" title="NFA Class" tocid="T_Algs4Net_NFA">NFA Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_NonrecursiveDFS.htm" title="NonrecursiveDFS Class" tocid="T_Algs4Net_NonrecursiveDFS">NonrecursiveDFS Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_NonrecursiveDirectedDFS.htm" title="NonrecursiveDirectedDFS Class" tocid="T_Algs4Net_NonrecursiveDirectedDFS">NonrecursiveDirectedDFS Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Particle.htm" title="Particle Class" tocid="T_Algs4Net_Particle">Particle Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Point2D.htm" title="Point2D Class" tocid="T_Algs4Net_Point2D">Point2D Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_PrimMST.htm" title="PrimMST Class" tocid="T_Algs4Net_PrimMST">PrimMST Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Quick.htm" title="Quick Class" tocid="T_Algs4Net_Quick">Quick Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Quick3string.htm" title="Quick3string Class" tocid="T_Algs4Net_Quick3string">Quick3string Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Quick3way.htm" title="Quick3way Class" tocid="T_Algs4Net_Quick3way">Quick3way Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_QuickFindUF.htm" title="QuickFindUF Class" tocid="T_Algs4Net_QuickFindUF">QuickFindUF Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_QuickUnionUF.htm" title="QuickUnionUF Class" tocid="T_Algs4Net_QuickUnionUF">QuickUnionUF Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_QuickX.htm" title="QuickX Class" tocid="T_Algs4Net_QuickX">QuickX Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_RabinKarp.htm" title="RabinKarp Class" tocid="T_Algs4Net_RabinKarp">RabinKarp Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_RandomSeq.htm" title="RandomSeq Class" tocid="T_Algs4Net_RandomSeq">RandomSeq Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_RectHV.htm" title="RectHV Class" tocid="T_Algs4Net_RectHV">RectHV Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_RedBlackBST_2.htm" title="RedBlackBST(Key, Value) Class" tocid="T_Algs4Net_RedBlackBST_2">RedBlackBST(Key, Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_ResizingArrayBag_1.htm" title="ResizingArrayBag(Item) Class" tocid="T_Algs4Net_ResizingArrayBag_1">ResizingArrayBag(Item) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_ResizingArrayQueue_1.htm" title="ResizingArrayQueue(Item) Class" tocid="T_Algs4Net_ResizingArrayQueue_1">ResizingArrayQueue(Item) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_ResizingArrayStack_1.htm" title="ResizingArrayStack(Item) Class" tocid="T_Algs4Net_ResizingArrayStack_1">ResizingArrayStack(Item) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_RunLength.htm" title="RunLength Class" tocid="T_Algs4Net_RunLength">RunLength Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Selection.htm" title="Selection Class" tocid="T_Algs4Net_Selection">Selection Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_SeparateChainingHashST_2.htm" title="SeparateChainingHashST(Key, Value) Class" tocid="T_Algs4Net_SeparateChainingHashST_2">SeparateChainingHashST(Key, Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_SequentialSearchST_2.htm" title="SequentialSearchST(Key, Value) Class" tocid="T_Algs4Net_SequentialSearchST_2">SequentialSearchST(Key, Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_SET_1.htm" title="SET(Key) Class" tocid="T_Algs4Net_SET_1">SET(Key) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Shell.htm" title="Shell Class" tocid="T_Algs4Net_Shell">Shell Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_SparseVector.htm" title="SparseVector Class" tocid="T_Algs4Net_SparseVector">SparseVector Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_ST_2.htm" title="ST(Key, Value) Class" tocid="T_Algs4Net_ST_2">ST(Key, Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_StaticSETofInts.htm" title="StaticSETofInts Class" tocid="T_Algs4Net_StaticSETofInts">StaticSETofInts Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_StdRandom.htm" title="StdRandom Class" tocid="T_Algs4Net_StdRandom">StdRandom Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Stopwatch.htm" title="Stopwatch Class" tocid="T_Algs4Net_Stopwatch">Stopwatch Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_StopwatchWin32.htm" title="StopwatchWin32 Class" tocid="T_Algs4Net_StopwatchWin32">StopwatchWin32 Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_SuffixArray.htm" title="SuffixArray Class" tocid="T_Algs4Net_SuffixArray">SuffixArray Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_SuffixArrayX.htm" title="SuffixArrayX Class" tocid="T_Algs4Net_SuffixArrayX">SuffixArrayX Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_SymbolDigraph.htm" title="SymbolDigraph Class" tocid="T_Algs4Net_SymbolDigraph">SymbolDigraph Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_SymbolGraph.htm" title="SymbolGraph Class" tocid="T_Algs4Net_SymbolGraph">SymbolGraph Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TarjanSCC.htm" title="TarjanSCC Class" tocid="T_Algs4Net_TarjanSCC">TarjanSCC Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TextInput.htm" title="TextInput Class" tocid="T_Algs4Net_TextInput">TextInput Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_ThreeSum.htm" title="ThreeSum Class" tocid="T_Algs4Net_ThreeSum">ThreeSum Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_ThreeSumFast.htm" title="ThreeSumFast Class" tocid="T_Algs4Net_ThreeSumFast">ThreeSumFast Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TopM.htm" title="TopM Class" tocid="T_Algs4Net_TopM">TopM Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Topological.htm" title="Topological Class" tocid="T_Algs4Net_Topological">Topological Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TopologicalX.htm" title="TopologicalX Class" tocid="T_Algs4Net_TopologicalX">TopologicalX Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Transaction.htm" title="Transaction Class" tocid="T_Algs4Net_Transaction">Transaction Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Transaction_HowMuchOrder.htm" title="Transaction.HowMuchOrder Class" tocid="T_Algs4Net_Transaction_HowMuchOrder">Transaction.HowMuchOrder Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Transaction_WhenOrder.htm" title="Transaction.WhenOrder Class" tocid="T_Algs4Net_Transaction_WhenOrder">Transaction.WhenOrder Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Transaction_WhoOrder.htm" title="Transaction.WhoOrder Class" tocid="T_Algs4Net_Transaction_WhoOrder">Transaction.WhoOrder Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TransitiveClosure.htm" title="TransitiveClosure Class" tocid="T_Algs4Net_TransitiveClosure">TransitiveClosure Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TrieSET.htm" title="TrieSET Class" tocid="T_Algs4Net_TrieSET">TrieSET Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TrieST_1.htm" title="TrieST(Value) Class" tocid="T_Algs4Net_TrieST_1">TrieST(Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TST_1.htm" title="TST(Value) Class" tocid="T_Algs4Net_TST_1">TST(Value) Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_TwoPersonZeroSumGame.htm" title="TwoPersonZeroSumGame Class" tocid="T_Algs4Net_TwoPersonZeroSumGame">TwoPersonZeroSumGame Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_UF.htm" title="UF Class" tocid="T_Algs4Net_UF">UF Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_Vector.htm" title="Vector Class" tocid="T_Algs4Net_Vector">Vector Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_WeightedQuickUnionUF.htm" title="WeightedQuickUnionUF Class" tocid="T_Algs4Net_WeightedQuickUnionUF">WeightedQuickUnionUF Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="T_Algs4Net_WhiteFilter.htm" title="WhiteFilter Class" tocid="T_Algs4Net_WhiteFilter">WhiteFilter Class</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">Algs4Net Namespace</td></tr></table><span class="introStyle"></span><div class="summary"> </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Classes</span></div><div id="ID1RBSection" class="collapsibleSection"><table id="typeList" class="members"><tr><th class="iconColumn">
					 
				</th><th>Class</th><th>Description</th></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Accumulator.htm">Accumulator</a></td><td><div class="summary"><p>
             The <span class="code">Accumulator</span> class is a data type for computing the running
             mean, sample standard deviation, and sample variance of a stream of real
             numbers. It provides an example of a mutable data type and a streaming
             algorithm.</p><p>
             This implementation uses a one-pass algorithm that is less susceptible
             to floating-point roundoff error than the more straightforward
             implementation based on saving the sum of the squares of the numbers.
             This technique is due to
             <a href="https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Online_algorithm">B. P. Welford</a>.
             Each operation takes constant time in the worst case.
             The amount of memory is constant - the data values are not stored.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_AcyclicLP.htm">AcyclicLP</a></td><td><div class="summary"><p>
             The <span class="code">AcyclicLP</span> class represents a data type for solving the
             single-source longest paths problem in edge-weighted directed
             acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.
             </p><p>
             This implementation uses a topological-sort based algorithm.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">DistTo()</span> and <span class="code">HasPathTo()</span> methods take
             constant time and the <span class="code">PathTo()</span> method takes time proportional to the
             number of edges in the longest path returned.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_AcyclicSP.htm">AcyclicSP</a></td><td><div class="summary"><p>
             The <span class="code">AcyclicSP</span> class represents a data type for solving the
             single-source shortest paths problem in edge-weighted directed acyclic
             graphs (DAGs). The edge weights can be positive, negative, or zero.
             </p><p>This implementation uses a topological-sort based algorithm.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">DistTo()</span> and <span class="code">HasPathTo()</span> methods take
             constant time and the <span class="code">PathTo()</span> method takes time proportional to the
             number of edges in the shortest path returned.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_AdjMatrixEdgeWeightedDigraph.htm">AdjMatrixEdgeWeightedDigraph</a></td><td><div class="summary"><p>
             The <span class="code">AdjMatrixEdgeWeightedDigraph</span> class represents a edge-weighted
             digraph of vertices named 0 through <span class="code">V</span> - 1, where each
             directed edge is of type  and has a real-valued weight.
             It supports the following two primary operations: add a directed edge
             to the digraph and iterate over all of edges incident from a given vertex.
             It also provides methods for returning the number of vertices <span class="code">V</span> and the number
             of edges <span class="code">E</span>. Parallel edges are disallowed; self-loops are permitted.
             </p><p>
             This implementation uses an adjacency-matrix representation.
             All operations take constant time (in the worst case) except
             iterating over the edges incident from a given vertex, which takes
             time proportional to <span class="code">V</span>.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Alphabet.htm">Alphabet</a></td><td><div class="summary">
            A data type for alphabets, for use with string-processing code that must 
            convert between an alphabet of size R and the integers 0 through R-1.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Animation.htm">Animation</a></td><td><div class="summary">
            Demonstrates basic drawing and animation capabilities using the current
            version of <a href="T_Algs4Net_DrawingWindow.htm">DrawingWindow</a>. The class could be marked 
            internal as it has no use outside the 
            <a href="M_Algs4Net_Animation_MainTest.htm">MainTest(<span id="LSTFAD1909E_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_0?cpp=array&lt;");</script>String<span id="LSTFAD1909E_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_1?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a> method.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Arbitrage.htm">Arbitrage</a></td><td><div class="summary"><p>
             The <span class="code">Arbitrage</span> class provides a client that finds an arbitrage
             opportunity in a currency exchange table by constructing a
             complete-digraph representation of the exchange table and then finding
             a negative cycle in the digraph.
             </p><p>
             This implementation uses the Bellman-Ford algorithm to find a
             negative cycle in the complete digraph.
             The running time is proportional to <span class="code">V</span><sup>3</sup> in the
             worst case, where <span class="code">V</span> is the number of currencies.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_AssignmentProblem.htm">AssignmentProblem</a></td><td><div class="summary"><p>
             The <span class="code">AssignmentProblem</span> class represents a data type for computing
             an optimal solution to an <span class="code">N</span>-by-<span class="code">N</span><span class="code">Assignment problem</span>.
             The assignment problem is to find a minimum weight matching in an
             edge-weighted complete bipartite graph.
             </p><p>
             The data type supplies methods for determining the optimal solution
             and the corresponding dual solution.
             </p><p>
             This implementation uses the <span class="code">Successive shortest paths algorithm</span>.
             The order of growth of the running time in the worst case is
             O(<span class="code">N</span>^3 log <span class="code">N</span>) to solve an <span class="code">N</span>-by-<span class="code">N</span>
             instance.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Average.htm">Average</a></td><td><div class="summary">
             The <span class="code">Average</span> class provides a client for reading in a sequence
             of real numbers and printing out their average.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Bag_1.htm">Bag<span id="LSTFAD1909E_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_2?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_3?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
            The <span class="code">Bag</span> class represents a bag (or multiset) of
            generic items. It supports insertion and iterating over the
            items in arbitrary order.</p><p>
            This implementation uses a singly-linked list with a nested, non-static
            class Node and hence is the same as the <span class="code">LinkedBag</span> class in
            algs4.jar. The <span class="code">Add</span>, <span class="code">IsEmpty</span>, and <span class="code">Count</span> operations
            take constant time. Iteration takes time proportional to the number of items.
            </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BasicVisual.htm">BasicVisual</a></td><td><div class="summary">
            The base class to faciliate drawing while keeping track of the drawing
            visual object. See a derived class such as <a href="T_Algs4Net_Point2D.htm">Point2D</a> for
            an example
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BellmanFordSP.htm">BellmanFordSP</a></td><td><div class="summary"><p>
             The <span class="code">BellmanFordSP</span> class represents a data type for solving the
             single-source shortest paths problem in edge-weighted digraphs with
             no negative cycles. The edge weights can be positive, negative, or zero.
             This class finds either a shortest path from the source vertex <span class="code">S</span>
             to every other vertex or a negative cycle reachable from the source vertex.
             </p><p>This implementation uses the Bellman-Ford-Moore algorithm.
             The constructor takes time proportional to <span class="code">V</span> (<span class="code">V</span> + <span class="code">E</span>)
             in the worst case, where <span class="code">V</span> is the number of vertices and <span class="code">E</span>
             is the number of edges.
             Afterwards, the <span class="code">distTo()</span>, <span class="code">hasPathTo()</span>, and <span class="code">hasNegativeCycle()</span>
             methods take constant time; the <span class="code">pathTo()</span> and <span class="code">negativeCycle()</span>
             method takes time proportional to the number of edges returned.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BinaryDump.htm">BinaryDump</a></td><td><div class="summary"><p>
             The <span class="code">BinaryDump</span> class provides a client for displaying the contents
             of a binary file in binary.</p><p>
             For more full-featured versions, see the Unix utilities
             <span class="code">od</span> (octal dump) and <span class="code">hexdump</span> (hexadecimal dump).
             See also .
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BinaryInput.htm">BinaryInput</a></td><td><div class="summary"><p><span class="code">Binary standard input</span>. This class provides methods for reading
             in bits from standard input, either one bit at a time (as a <span class="code">boolean</span>),
             8 bits at a time (as a <span class="code">byte</span> or <span class="code">char</span>),
             16 bits at a time (as a <span class="code">short</span>), 32 bits at a time
             (as an <span class="code">int</span> or <span class="code">float</span>), or 64 bits at a time (as a
             <span class="code">double</span> or <span class="code">long</span>).</p><p>All primitive types are assumed to be represented using their 
             standard .NET representations, in little-endian (least significant
             byte first) order.</p><p>
             The client should not intermix calls to <span class="code">BinaryStdIn</span> with calls
             to <span class="code">StdIn</span> or <span class="code">Console.In</span>;
             otherwise unexpected behavior will result.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BinaryInsertion.htm">BinaryInsertion</a></td><td><div class="summary"><p>
             The <span class="code">BinaryInsertion</span> class provides a static method for sorting an
             array using an optimized binary insertion sort with half exchanges.
             </p><p>
             This implementation makes ~ N lg N compares for any array of length N.
             However, in the worst case, the running time is quadratic because the
             number of array accesses can be proportional to N^2 (e.g, if the array
             is reverse sorted). As such, it is not suitable for sorting large
             arrays (unOrderHelper.Less the number of inversions is small).
             </p><p>
             The sorting algorithm is stable and uses O(1) extra memory.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BinaryOutput.htm">BinaryOutput</a></td><td><div class="summary"><p><span class="code">Binary standard output</span>. This class provides methods for converting
             primtive type variables (<span class="code">boolean</span>, <span class="code">byte</span>, <span class="code">char</span>,
             <span class="code">int</span>, <span class="code">long</span>, <span class="code">float</span>, and <span class="code">double</span>)
             to sequences of bits and writing them to standard output.
             Uses .NET representations, in little-endian (least-significant byte first).</p><p>
             The client must <span class="code">Flush()</span> the output stream when finished writing bits and 
             should not intermixing calls to <span class="code">output</span> with calls
             to <span class="code">Console</span> or <span class="code">Console.Out</span>; otherwise unexpected behavior 
             will result.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BinarySearch.htm">BinarySearch</a></td><td><div class="summary"><p>The <span class="code">BinarySearch</span> class provides a static method for binary
            searching for an integer in a sorted array of integers.
            </p><p>
            The <span class="code">Rank</span> operations takes logarithmic time in the worst case.
            </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BinarySearchST_2.htm">BinarySearchST<span id="LSTFAD1909E_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key, Value<span id="LSTFAD1909E_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">BST</span> class represents an ordered symbol table of generic
             key-value pairs.
             It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Indexer</span>, <span class="code">Contains</span>,
             <span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
             It also provides ordered methods for finding the <span class="code">Minimum</span>,
             <span class="code">Maximum</span>, <span class="code">Floor</span>, and <span class="code">Ceiling</span>.
             It also provides a <span class="code">Keys</span> method for iterating over all of the keys.
             A symbol table implements the <span class="code">Associative array</span> abstraction:
             when associating a value with a key that is already in the symbol table,
             the convention is to replace the old value with the new value.
             Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_6?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_7?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
             values cannot be <span class="code">null</span>. Setting the value associated with a key 
             to <span class="code">null</span> is equivalent to deleting the key from the symbol table.</p><p>This implementation uses a sorted array. It requires that
             the key type implements the <span class="code">IComparable</span> interface and calls the
             <span class="code">CompareTo()</span> method to compare two keys. It does not call either
             <span class="code">Equals()</span> or <span class="code">GetHashCode()</span>.
             The <span class="code">Put</span> and <span class="code">Remove</span> operations each take linear time in
             the worst case; the <span class="code">Contains</span>, <span class="code">Ceiling</span>, <span class="code">Floor</span>,
             and <span class="code">Rank</span> operations take logarithmic time; the <span class="code">Count</span>,
             <span class="code">IsEmpty</span>, <span class="code">Minimum</span>, <span class="code">Maximum</span>, and <span class="code">indexer</span>
             operations take constant time. Construction takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Bipartite.htm">Bipartite</a></td><td><div class="summary"><p>
             The <span class="code">Bipartite</span> class represents a data type for
             determining whether an undirected graph is bipartite or whether
             it has an odd-length cycle.
             The <span class="code">IsBipartite</span> operation determines whether the graph is
             bipartite. If so, the <span class="code">Color</span> operation determines a
             bipartition; if not, the <span class="code">OddCycle</span> operation determines a
             cycle with an odd number of edges.
             </p><p>
             This implementation uses depth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>
             (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">IsBipartite</span> and <span class="code">Color</span> operations
             take constant time; the <span class="code">OddCycle</span> operation takes time proportional
             to the length of the cycle.</p><p>
             See  for a nonrecursive version that uses breadth-first
             search.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BipartiteMatching.htm">BipartiteMatching</a></td><td><div class="summary"><p>
             The <span class="code">BipartiteMatching</span> class represents a data type for computing a
             <span class="code">Maximum (cardinality) matching</span> and a <span class="code">Minimum (cardinality) vertex cover</span>
             in a bipartite graph.</p><p>
             A <span class="code">Bipartite graph</span> in a graph whose vertices can be partitioned
             into two disjoint sets such that every edge has one endpoint in either set.
             A <span class="code">Matching</span> in a graph is a subset of its edges with no common
             vertices. A <span class="code">Maximum matching</span> is a matching with the maximum number
             of edges.
             A <span class="code">Perfect matching</span> is a matching which matches all vertices in the graph.
             A <span class="code">Vertex cover</span> in a graph is a subset of its vertices such that
             every edge is incident to at least one vertex. A <span class="code">Minimum vertex cover</span>
             is a vertex cover with the minimum number of vertices.
             By Konig's theorem, in any biparite graph, the maximum number of 
             edges in matching equals the minimum number of vertices in a vertex cover.</p><p>
             The maximum matching problem in <span class="code">Nonbipartite</span> graphs is
             also important, but all known algorithms for this more general problem
             are substantially more complicated.
             </p><p>
             This implementation uses the <span class="code">Alternating path algorithm</span>.
             It is equivalent to reducing to the maximum flow problem and running
             the augmenting path algorithm on the resulting flow network, but it
             does so with less overhead.
             The order of growth of the running time in the worst case is
             (<span class="code">E</span> + <span class="code">V</span>) <span class="code">V</span>,
             where <span class="code">E</span> is the number of edges and <span class="code">V</span> is the number
             of vertices in the graph. It uses extra space (not including the graph)
             proportional to <span class="code">V</span>.
             </p><p>
             See also , which solves the problem in  O(<span class="code">E</span> sqrt(<span class="code">V</span>))
             using the Hopcroft-Karp algorithm and
             <a href="http://algs4.cs.princeton.edu/65reductions/BipartiteMatchingToMaxflow.java.html">BipartiteMatchingToMaxflow</a>, which solves the problem in
             O(<span class="code">E V</span>) time via a reduction to maxflow.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BipartiteX.htm">BipartiteX</a></td><td><div class="summary"><p>
             The <span class="code">BipartiteX</span> class represents a data type for
             determining whether an undirected graph is bipartite or whether
             it has an odd-length cycle.
             The <span class="code">IsBipartite</span> operation determines whether the graph is
             bipartite. If so, the <span class="code">Color</span> operation determines a
             bipartition; if not, the <span class="code">OddCycle</span> operation determines a
             cycle with an odd number of edges.
             </p><p>
             This implementation uses breadth-first search and is nonrecursive.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>
             (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">IsBipartite</span> and <span class="code">Color</span> operations
             take constant time; the <span class="code">OddCycle</span> operation takes time proportional
             to the length of the cycle.
             See  for a recursive version that uses depth-first search.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BlackFilter.htm">BlackFilter</a></td><td><div class="summary">
            The <span class="code">BlackFilter</span> class provides a client for reading in a <span class="code">Blacklist</span>
            of words from a file; then, reading in a sequence of words from standard input, 
            printing out each word that <span class="code">Does not</span> appear in the file. 
            It is useful as a test client for various symbol table implementations.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BoruvkaMST.htm">BoruvkaMST</a></td><td><div class="summary"><p>
             The <span class="code">BoruvkaMST</span> class represents a data type for computing a
             <span class="code">Minimum spanning tree</span> in an edge-weighted graph.
             The edge weights can be positive, zero, or negative and need not
             be distinct. If the graph is not connected, it computes a <em>Minimum
             spanning forest</em>, which is the union of minimum spanning trees
             in each connected component. The <span class="code">Weight</span> method returns the 
             weight of a minimum spanning tree and the <span class="code">Edges()</span> method
             returns its edges.
             </p><p>
             This implementation uses <span class="code">Boruvka's algorithm</span> and the union-find
             data type.</p><p>
             The constructor takes time proportional to <span class="code">E</span> log <span class="code">V</span>
             and extra space (not including the graph) proportional to <span class="code">V</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">weight()</span> method takes constant time
             and the <span class="code">edges()</span> method takes time proportional to <span class="code">V</span>.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BoyerMoore.htm">BoyerMoore</a></td><td><div class="summary"><p>
             The <span class="code">BoyerMoore</span> class finds the first occurrence of a pattern string
             in a text string.</p><p>
             This implementation uses the Boyer-Moore algorithm (with the bad-character
             rule, but not the strong good suffix rule).</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BreadthFirstDirectedPaths.htm">BreadthFirstDirectedPaths</a></td><td><div class="summary"><p>
             The <span class="code">BreadthDirectedFirstPaths</span> class represents a data type for finding
             shortest paths (number of edges) from a source vertex <span class="code">S</span>
             (or set of source vertices) to every other vertex in the digraph.
             </p><p>This implementation uses breadth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             It uses extra space (not including the digraph) proportional to <span class="code">V</span>.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BreadthFirstPaths.htm">BreadthFirstPaths</a></td><td><div class="summary"><p>
             The <span class="code">BreadthFirstPaths</span> class represents a data type for finding
             shortest paths (number of edges) from a source vertex <span class="code">S</span>
             (or a set of source vertices)
             to every other vertex in an undirected graph.
             </p><p>This implementation uses breadth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             It uses extra space (not including the graph) proportional to <span class="code">V</span>.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BST_2.htm">BST<span id="LSTFAD1909E_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_8?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key, Value<span id="LSTFAD1909E_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_9?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">BST</span> class represents an ordered symbol table of generic
             key-value pairs.
             It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Indexer</span>, <span class="code">Contains</span>,
             <span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
             It also provides ordered methods for finding the <span class="code">Minimum</span>,
             <span class="code">Maximum</span>, <span class="code">Floor</span>, <span class="code">Select</span>, <span class="code">Ceiling</span>.
             It also provides a <span class="code">Keys</span> method for iterating over all of the keys.
             A symbol table implements the <span class="code">Associative array</span> abstraction:
             when associating a value with a key that is already in the symbol table,
             the convention is to replace the old value with the new value.
             Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_10?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_11?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
             values cannot be <span class="code">null</span>. Setting the
             value associated with a key to <span class="code">null</span> is equivalent to deleting the key
             from the symbol table.</p><p>This implementation uses an (unbalanced) binary search tree. It requires that
             the key type implements the <span class="code">Comparable</span> interface and calls the
             <span class="code">CompareTo()</span> and method to compare two keys. It does not call either
             <span class="code">Equals()</span> or <span class="code">GetHashCode()</span>.
             The <span class="code">Put</span>, <span class="code">Contains</span>, <span class="code">Remove</span>, <span class="code">Minimum</span>,
             <span class="code">Maximum</span>, <span class="code">Ceiling</span>, <span class="code">Floor</span>, <span class="code">Select</span>, and
             <span class="code">Rank</span>  operations each take
             linear time in the worst case, if the tree becomes unbalanced.
             The <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
             Construction takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_BTree_2.htm">BTree<span id="LSTFAD1909E_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_12?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key, Value<span id="LSTFAD1909E_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_13?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">BTree</span> class represents an ordered symbol table of generic
             key-value pairs.
             It supports the <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Indexer</span><span class="code">Contains</span>,
             <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.</p><p>
             A symbol table implements the <span class="code">Associative array</span> abstraction:
             when associating a value with a key that is already in the symbol table,
             the convention is to replace the old value with the new value.
             Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_14?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_15?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
             values cannot be <span class="code">null</span>. Setting the
             value associated with a key to <span class="code">null</span> is equivalent to deleting the key
             from the symbol table.</p><p>
             This implementation uses a B-tree. It requires that
             the key type implements the <span class="code">IComparable</span> interface and calls the
             <span class="code">CompareTo()</span> and method to compare two keys. It does not call either
             <span class="code">Equals()</span> or <span class="code">GetHashCode()</span>. The <span class="code">Get</span>, <span class="code">Put</span>, 
             and <span class="code">Contains</span> operations each make log<sub><span class="code">M</span></sub>(<span class="code">N</span>) 
             probes in the worst case, where <span class="code">N</span> is the number of key-value pairs
             and <span class="code">M</span> is the branching factor. The <span class="code">Count</span>, and 
             <span class="code">IsEmpty</span> operations take constant time. Construction takes constant time.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Cat.htm">Cat</a></td><td><div class="summary">
             The <span class="code">Cat</span> class provides a client for concatenating the results
             of several text files.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_CC.htm">CC</a></td><td><div class="summary"><p>
             The <span class="code">CC</span> class represents a data type for
             determining the connected components in an undirected graph.
             The <span class="code">Id</span> operation determines in which connected component
             a given vertex lies; the <span class="code">Connected</span> operation
             determines whether two vertices are in the same connected component;
             the <span class="code">Count</span> operation determines the number of connected
             components; and the <span class="code">Count</span> operation determines the number
             of vertices in the connect component containing a given vertex.
             The <span class="code">Component identifier</span> of a connected component is one of the
             vertices in the connected component: two vertices have the same component
             identifier if and only if they are in the same connected component.
             </p><p>
             This implementation uses depth-first search. The constructor takes time 
             proportional to <span class="code">V + E</span> (in the worst case), <span class="code">V</span> is the number 
             of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">Id</span>, <span class="code">Count</span>, <span class="code">Connected</span>,
             and <span class="code">Count</span> operations take constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_ClosestPair.htm">ClosestPair</a></td><td><div class="summary"><p>
             The <span class="code">ClosestPair</span> data type computes a closest pair of points
             in a set of <span class="code">N</span> points in the plane and provides accessor methods 
             for getting the closest pair of points and the distance between them.
             The distance between two points is their Euclidean distance.
             </p><p>
             This implementation uses a divide-and-conquer algorithm. 
             It runs in O(<span class="code">N</span> log <span class="code">N</span>) time in the worst case and uses
             O(<span class="code">N</span>) extra space. See also .
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_CollisionSystem.htm">CollisionSystem</a></td><td><div class="summary">
             The <span class="code">CollisionSystem</span> class represents a collection of particles
             moving in the unit box, according to the laws of elastic collision.
             This event-based simulation relies on a priority queue.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Complex.htm">Complex</a></td><td><div class="summary">The <span class="code">Complex</span> class represents a complex number.
             Complex numbers are immutable: their values cannot be changed after they
             are created. It includes methods for addition, subtraction, multiplication, 
             division, conjugation, and other common functions on complex numbers.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Count.htm">Count</a></td><td><div class="summary">
             The <span class="code">Count</span> class provides an  client for reading
             in a piece of text and computing the frequency of occurrence of each
             character over a given alphabet.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Counter.htm">Counter</a></td><td><div class="summary">
             The <span class="code">Counter</span> class is a mutable data type to encapsulate a counter.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_CPM.htm">CPM</a></td><td><div class="summary"><p>
             The <span class="code">CPM</span> class provides a client that solves the
             parallel precedence-constrained job scheduling problem
             via the <span class="code">Critical path method</span>. It reduces the problem
             to the longest-paths problem in edge-weighted DAGs.
             It builds an edge-weighted digraph (which must be a DAG)
             from the job-scheduling problem specification,
             finds the longest-paths tree, and computes the longest-paths
             lengths (which are precisely the start times for each job).
             </p><p>
             This implementation uses  to find a longest
             path in a DAG.
             The running time is proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of jobs and <span class="code">E</span> is the
             number of precedence constraints.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Cycle.htm">Cycle</a></td><td><div class="summary"><p>The <span class="code">Cycle</span> class represents a data type for
             determining whether an undirected graph has a cycle.
             The <span class="code">HasCycle</span> operation determines whether the graph has
             a cycle and, if so, the <span class="code">GetCycle</span> operation returns one.</p><p>This implementation uses depth-first search. The constructor 
             takes time proportional to <span class="code">V</span> + <span class="code">E</span> (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">HasCycle</span> operation takes constant time; the <span class="code">Cycle</span>
             operation takes time proportional to the length of the cycle.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Date.htm">Date</a></td><td><div class="summary">
             The <span class="code">Date</span> class is an immutable data type to encapsulate a
             date (day, month, and year).</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DeDup.htm">DeDup</a></td><td><div class="summary">
             The <span class="code">DeDup</span> class provides a client for reading in a sequence of
             words from standard input and printing each word, removing any duplicates.
             It is useful as a test client for various symbol table implementations.
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DegreesOfSeparation.htm">DegreesOfSeparation</a></td><td><div class="summary"><p>
             The <span class="code">DegreesOfSeparation</span> class provides a client for finding
             the degree of separation between one distinguished individual and
             every other individual in a social network.
             As an example, if the social network consists of actors in which
             two actors are connected by a link if they appeared in the same movie,
             and Kevin Bacon is the distinguished individual, then the client
             computes the Kevin Bacon number of every actor in the network.
             </p><p>
             The running time is proportional to the number of individuals and
             connections in the network. If the connections are given implicitly,
             as in the movie network example (where every two actors are connected
             if they appear in the same movie), the efficiency of the algorithm
             is improved by allowing both movie and actor vertices and connecting
             each movie to all of the actors that appear in that movie.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DepthFirstDirectedPaths.htm">DepthFirstDirectedPaths</a></td><td><div class="summary"><p>
             The <span class="code">DepthFirstDirectedPaths</span> class represents a data type for finding
             directed paths from a source vertex <span class="code">S</span> to every other vertex in the digraph.
             </p><p>This implementation uses depth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             It uses extra space (not including the graph) proportional to <span class="code">V</span>.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DepthFirstOrder.htm">DepthFirstOrder</a></td><td><div class="summary"><p>
             The <span class="code">DepthFirstOrder</span> class represents a data type for
             determining depth-first search ordering of the vertices in a digraph
             or edge-weighted digraph, including preorder, postorder, and reverse postorder.
             </p><p>This implementation uses depth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span> (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">Preorder</span>, <span class="code">Postorder</span>, and <span class="code">Reverse postorder</span>
             operation takes take time proportional to <span class="code">V</span>.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DepthFirstPaths.htm">DepthFirstPaths</a></td><td><div class="summary"><p>
             The <span class="code">DepthFirstPaths</span> class represents a data type for finding
             paths from a source vertex <span class="code">S</span> to every other vertex
             in an undirected graph.
             </p><p>This implementation uses depth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             It uses extra space (not including the graph) proportional to <span class="code">V</span>.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DepthFirstSearch.htm">DepthFirstSearch</a></td><td><div class="summary"><p>
             The <span class="code">DepthFirstSearch</span> class represents a data type for
             determining the vertices connected to a given source vertex <span class="code">S</span>
             in an undirected graph. For versions that find the paths, see
              and .
             This implementation uses depth-first search.</p><p>
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span> (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             It uses extra space (not including the graph) proportional to <span class="code">V</span>.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Digraph.htm">Digraph</a></td><td><div class="summary"><p>
             The <span class="code">Digraph</span> class represents a directed graph of vertices
             named 0 through <span class="code">V</span> - 1.
             It supports the following two primary operations: add an edge to the digraph,
             iterate over all of the vertices adjacent from a given vertex.
             Parallel edges and self-loops are permitted.</p><p>
             This implementation uses an adjacency-lists representation, which 
             is a vertex-indexed array of  objects.
             All operations take constant time (in the worst case) except
             iterating over the vertices adjacent from a given vertex, which takes
             time proportional to the number of such vertices.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DigraphGenerator.htm">DigraphGenerator</a></td><td><div class="summary">
             The <span class="code">DigraphGenerator</span> class provides static methods for creating
             various digraphs, including Erdos-Renyi random digraphs, random DAGs,
             random rooted trees, random rooted DAGs, random tournaments, path digraphs,
             cycle digraphs, and the complete digraph.
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DijkstraAllPairsSP.htm">DijkstraAllPairsSP</a></td><td><div class="summary"><p>
             The <span class="code">DijkstraAllPairsSP</span> class represents a data type for solving the
             all-pairs shortest paths problem in edge-weighted digraphs
             where the edge weights are nonnegative.
             </p><p>
             This implementation runs Dijkstra's algorithm from each vertex.
             The constructor takes time proportional to <span class="code">V</span> (<span class="code">E</span> log <span class="code">V</span>)
             and uses space proprtional to <span class="code">V</span><sup>2</sup>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">Dist()</span> and <span class="code">hasPath()</span> methods take
             constant time and the <span class="code">Path()</span> method takes time proportional to the
             number of edges in the shortest path returned.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DijkstraSP.htm">DijkstraSP</a></td><td><div class="summary"><p>
             The <span class="code">DijkstraSP</span> class represents a data type for solving the
             single-source shortest paths problem in edge-weighted digraphs
             where the edge weights are nonnegative.</p><p>
             This implementation uses Dijkstra's algorithm with a binary heap.
             The constructor takes time proportional to <span class="code">E</span> log <span class="code">V</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">DistTo()</span> and <span class="code">HasPathTo()</span> methods take
             constant time and the <span class="code">PathTo()</span> method takes time proportional to the
             number of edges in the shortest path returned.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DijkstraUndirectedSP.htm">DijkstraUndirectedSP</a></td><td><div class="summary"><p>
             The <span class="code">DijkstraUndirectedSP</span> class represents a data type for solving
             the single-source shortest paths problem in edge-weighted graphs
             where the edge weights are nonnegative.
             </p><p>
             This implementation uses Dijkstra's algorithm with a binary heap.
             The constructor takes time proportional to <span class="code">E</span> log <span class="code">V</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">DistTo()</span> and <span class="code">HasPathTo()</span> methods take
             constant time and the <span class="code">PathTo()</span> method takes time proportional to the
             number of edges in the shortest path returned.</p><p>See  for a version on edge-weighted digraphs.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DirectedCycle.htm">DirectedCycle</a></td><td><div class="summary"><p>
             The <span class="code">DirectedCycle</span> class represents a data type for
             determining whether a digraph has a directed cycle.
             The <span class="code">HasCycle</span> operation determines whether the digraph has
             a directed cycle and, and of so, the <span class="code">Cycle</span> operation
             returns one.</p><p>This implementation uses depth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>
             (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">HasCycle</span> operation takes constant time;
             the <span class="code">Cycle</span> operation takes time proportional
             to the length of the cycle.</p><p>
             See  to compute a topological order if the
             digraph is acyclic.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DirectedCycleX.htm">DirectedCycleX</a></td><td><div class="summary"><p>
             The <span class="code">DirectedCycleX</span> class represents a data type for
             determining whether a digraph has a directed cycle.
             The <span class="code">HasCycle</span> operation determines whether the digraph has
             a directed cycle and, and of so, the <span class="code">Cycle</span> operation
             returns one.
             </p><p>
             This implementation uses a nonrecursive, queue-based algorithm.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>
             (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">HasCycle</span> operation takes constant time;
             the <span class="code">Cycle</span> operation takes time proportional
             to the length of the cycle.
             </p><p>
             See  for a recursive version that uses depth-first search.
             See  or  to compute a topological order
             when the digraph is acyclic.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DirectedDFS.htm">DirectedDFS</a></td><td><div class="summary"><p>
             The <span class="code">DirectedDFS</span> class represents a data type for
             determining the vertices reachable from a given source vertex <span class="code">S</span>
             (or set of source vertices) in a digraph. For versions that find the paths,
             see  and .
             </p><p>This implementation uses depth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span> (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DirectedEdge.htm">DirectedEdge</a></td><td><div class="summary">
             The <span class="code">DirectedEdge</span> class represents a weighted edge in an
             . Each edge consists of two integers
             (naming the two vertices) and a real-value weight. The data type
             provides methods for accessing the two endpoints of the directed edge and
             the weight.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DirectedEulerianCycle.htm">DirectedEulerianCycle</a></td><td><div class="summary"><p>
            The <span class="code">DirectedEulerianCycle</span> class represents a data type
            for finding an Eulerian cycle or path in a digraph.
            An <span class="code">Eulerian cycle</span> is a cycle (not necessarily simple) that
            uses every edge in the digraph exactly once.
            </p><p>
            This implementation uses a nonrecursive depth-first search.
            The constructor runs in O(<span class="code">E</span> + <span class="code">V</span>) time,
            and uses O(<span class="code">V</span>) extra space, where <span class="code">E</span> is the
            number of edges and <span class="code">V</span> the number of vertices
            All other methods take O(1) time.</p><p>
            To compute Eulerian paths in digraphs, see .
            To compute Eulerian cycles and paths in undirected graphs, see
             and .
            </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DirectedEulerianPath.htm">DirectedEulerianPath</a></td><td><div class="summary"><p>
            The <span class="code">DirectedEulerianPath</span> class represents a data type
            for finding an Eulerian path in a digraph.
            An <span class="code">Eulerian path</span> is a path (not necessarily simple) that
            uses every edge in the digraph exactly once.
            </p><p>
            This implementation uses a nonrecursive depth-first search.
            The constructor runs in O(E + V) time, and uses O(V) extra space,
            where E is the number of edges and V the number of vertices
            All other methods take O(1) time.
            </p><p>
            To compute Eulerian cycles in digraphs, see .
            To compute Eulerian cycles and paths in undirected graphs, see
             and .
            </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DoublingRatio.htm">DoublingRatio</a></td><td><div class="summary">
             The <span class="code">DoublingRatio</span> class provides a client for measuring
             the running time of a method using a doubling ratio test.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DoublingTest.htm">DoublingTest</a></td><td><div class="summary">
             The <span class="code">DoublingTest</span> class provides a client for measuring
             the running time of a method using a doubling test.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_DrawingWindow.htm">DrawingWindow</a></td><td><div class="summary"><p>
             The <span class="code">DrawingWindow</span> class provides a basic capability for
             creating drawings in a .NET environment using Windows Presentation
             Foundation (WPF) classes. It allows you to create drawings consisting of 
             points, lines, squares, circles, and other geometric shapes in a 
             window to save the drawings to a file. The class also includes
             facilities for text, color, pictures, and simple animation.</p><p>The coordinate system follows Windows convention, meaning that
             an x,y coordinate starts from the top-left corner, with the y axis
             oriented downward.</p><p>The API is modeled after the 
             <a href="http://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdDraw.java.html">StdDraw</a>
             class with necessary adaptation for the Windows environment.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Edge.htm">Edge</a></td><td><div class="summary">
             The <span class="code">Edge</span> class represents a weighted edge in an
             . Each edge consists of two integers
             (naming the two vertices) and a real-value weight. The data type
             provides methods for accessing the two endpoints of the edge and
             the weight. The natural order for this data type is by
             ascending order of weight.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_EdgeWeightedDigraph.htm">EdgeWeightedDigraph</a></td><td><div class="summary"><p>
             The <span class="code">EdgeWeightedDigraph</span> class represents a edge-weighted
             digraph of vertices named 0 through <span class="code">V</span> - 1, where each
             directed edge is of type  and has a real-valued weight.
             It supports the following two primary operations: add a directed edge
             to the digraph and iterate over all of edges incident from a given vertex.
             It also provides
             methods for returning the number of vertices <span class="code">V</span> and the number
             of edges <span class="code">E</span>. Parallel edges and self-loops are permitted.
             </p><p>
             This implementation uses an adjacency-lists representation, which 
             is a vertex-indexed array of <a href="T_Algs4Net_Bag_1.htm">Bag<span id="LSTFAD1909E_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_16?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_17?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> objects.
             All operations take constant time (in the worst case) except
             iterating over the edges incident from a given vertex, which takes
             time proportional to the number of such edges.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_EdgeWeightedDirectedCycle.htm">EdgeWeightedDirectedCycle</a></td><td><div class="summary"><p>
             The <span class="code">EdgeWeightedDirectedCycle</span> class represents a data type for
             determining whether an edge-weighted digraph has a directed cycle.
             The <span class="code">HasCycle</span> operation determines whether the edge-weighted
             digraph has a directed cycle and, if so, the <span class="code">Cycle</span> operation
             returns one.</p><p>This implementation uses depth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span> (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">HasCycle</span> operation takes constant time;
             the <span class="code">Cycle</span> operation takes time proportional
             to the length of the cycle.</p><p>See  to compute a topological order if 
             the edge-weighted digraph is acyclic.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_EdgeWeightedGraph.htm">EdgeWeightedGraph</a></td><td><div class="summary"><p>
             The <span class="code">EdgeWeightedGraph</span> class represents an edge-weighted
             graph of vertices named 0 through <span class="code">V</span> - 1, where each
             undirected edge is of type  and has a real-valued weight.
             It supports the following two primary operations: add an edge to the graph,
             iterate over all of the edges incident to a vertex. It also provides
             methods for returning the number of vertices <span class="code">V</span> and the number
             of edges <span class="code">E</span>. Parallel edges and self-loops are permitted.
             </p><p>
             This implementation uses an adjacency-lists representation, which
             is a vertex-indexed array of @link{Bag} objects.
             All operations take constant time (in the worst case) except
             iterating over the edges incident to a given vertex, which takes
             time proportional to the number of such edges.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_EulerianCycle.htm">EulerianCycle</a></td><td><div class="summary"><p>
            The <span class="code">EulerianCycle</span> class represents a data type
            for finding an Eulerian cycle or path in a graph.
            An <span class="code">Eulerian cycle</span> is a cycle (not necessarily simple) that
            uses every edge in the graph exactly once.
            </p><p>
            This implementation uses a nonrecursive depth-first search.
            The constructor runs in O(<span class="code">E</span> + <span class="code">V</span>) time,
            and uses O(<span class="code">E</span> + <span class="code">V</span>) extra space, where <span class="code">E</span> is the
            number of edges and <span class="code">V</span> the number of vertices
            All other methods take O(1) time.
            </p><p>
            To compute Eulerian paths in graphs, see .
            To compute Eulerian cycles and paths in digraphs, see
             and .
            </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_EulerianPath.htm">EulerianPath</a></td><td><div class="summary"><p>
             The <span class="code">EulerianPath</span> class represents a data type
             for finding an Eulerian path in a graph.
             An <span class="code">Eulerian path</span> is a path (not necessarily simple) that
             uses every edge in the graph exactly once.
             </p><p>
             This implementation uses a nonrecursive depth-first search.
             The constructor runs in O(<span class="code">E</span> + <span class="code">V</span>) time,
             and uses O(<span class="code">E</span> + <span class="code">V</span>) extra space,
             where <span class="code">E</span> is the number of edges and <span class="code">V</span> the number of vertices
             All other methods take O(1) time.
             </p><p>
             To compute Eulerian cycles in graphs, see .
             To compute Eulerian cycles and paths in digraphs, see
              and .
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_FarthestPair.htm">FarthestPair</a></td><td><div class="summary"><p>
             The <span class="code">FarthestPair</span> data type computes the farthest pair of points
             in a set of <span class="code">N</span> points in the plane and provides accessor methods
             for getting the farthest pair of points and the distance between them.
             The distance between two points is their Euclidean distance.
             </p><p>
             This implementation computes the convex hull of the set of points and
             uses the rotating calipers method to find all antipodal point pairs
             and the farthest pair.
             It runs in O(<span class="code">N</span> log <span class="code">N</span>) time in the worst case and uses
             O(<span class="code">N</span>) extra space.
             See also  and .
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_FFT.htm">FFT</a></td><td><div class="summary"><p>
             The <span class="code">FFT</span> class provides methods for computing the
             FFT (Fast-Fourier Transform), inverse FFT, linear convolution,
             and circular convolution of a complex array.
             </p><p>
             It is a bare-bones implementation that runs in <span class="code">N</span> log <span class="code">N</span> time,
             where <span class="code">N</span> is the length of the complex array. For simplicity,
             <span class="code">N</span> must be a power of 2.</p><p>
             Our goal is to optimize the clarity of the code, rather than performance.
             It is not the most memory efficient implementation because it uses
             objects to represents complex numbers and it it re-allocates memory
             for the subarray, instead of doing in-place or reusing a single temporary array.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_FileIndex.htm">FileIndex</a></td><td><div class="summary">
             The <span class="code">FileIndex</span> class provides a client for indexing a set of files,
             specified as command-line arguments. It takes queries from standard input
             and prints each file that contains the given query.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_FlowEdge.htm">FlowEdge</a></td><td><div class="summary">
             The <span class="code">FlowEdge</span> class represents a capacitated edge with a
             flow in a . Each edge consists of two integers
             (naming the two vertices), a real-valued capacity, and a real-valued
             flow. The data type provides methods for accessing the two endpoints
             of the directed edge and the weight. It also provides methods for
             changing the amount of flow on the edge and determining the residual
             capacity of the edge.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_FlowNetwork.htm">FlowNetwork</a></td><td><div class="summary"><p>
             The <span class="code">FlowNetwork</span> class represents a capacitated network
             with vertices named 0 through <span class="code">V</span> - 1, where each directed
             edge is of type  and has a real-valued capacity
             and flow.</p><p>
             It supports the following two primary operations: add an edge to the network,
             iterate over all of the edges incident to or from a vertex. It also provides
             methods for returning the number of vertices <span class="code">V</span> and the number
             of edges <span class="code">E</span>. Parallel edges and self-loops are permitted.</p><p>This implementation uses an adjacency-lists representation, which 
             is a vertex-indexed array of <a href="T_Algs4Net_Bag_1.htm">Bag<span id="LSTFAD1909E_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_18?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_19?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> objects.
             All operations take constant time (in the worst case) except
             iterating over the edges incident to a given vertex, which takes
             time proportional to the number of such edges.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_FloydWarshall.htm">FloydWarshall</a></td><td><div class="summary"><p>
             The <span class="code">FloydWarshall</span> class represents a data type for solving the
             all-pairs shortest paths problem in edge-weighted digraphs with
             no negative cycles.
             The edge weights can be positive, negative, or zero.
             This class finds either a shortest path between every pair of vertices
             or a negative cycle.
             </p><p>
             This implementation uses the Floyd-Warshall algorithm.
             The constructor takes time proportional to <span class="code">V</span><sup>3</sup> in the
             worst case, where <span class="code">V</span> is the number of vertices.
             Afterwards, the <span class="code">Dist()</span>, <span class="code">HasPath()</span>, and <span class="code">HasNegativeCycle()</span>
             methods take constant time; the <span class="code">Path()</span> and <span class="code">GetNegativeCycle()</span>
             method takes time proportional to the number of edges returned.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_FordFulkerson.htm">FordFulkerson</a></td><td><div class="summary"><p>
             The <span class="code">FordFulkerson</span> class represents a data type for computing a
             <span class="code">Maximum st-flow</span> and <span class="code">Minimum st-cut</span> in a flow
             network.</p><p>
             This implementation uses the <span class="code">Ford-Fulkerson</span> algorithm with
             the <span class="code">Shortest augmenting path</span> heuristic.
             The constructor takes time proportional to <span class="code">E V</span> (<span class="code">E</span> + <span class="code">V</span>)
             in the worst case and extra space (not including the network)
             proportional to <span class="code">V</span>, where <span class="code">V</span> is the number of vertices
             and <span class="code">E</span> is the number of edges. In practice, the algorithm will
             run much faster.
             Afterwards, the <span class="code">inCut()</span> and <span class="code">value()</span> methods take
             constant time.</p><p>
             If the capacities and initial flow values are all integers, then this
             implementation guarantees to compute an integer-valued maximum flow.
             If the capacities and floating-point numbers, then floating-point
             roundoff error can accumulate.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_FrequencyCounter.htm">FrequencyCounter</a></td><td><div class="summary">
             The <span class="code">FrequencyCounter</span> class provides a client for
             reading in a sequence of words and printing a word (exceeding
             a given length) that occurs most frequently. It is useful as
             a test client for various symbol table implementations.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_GabowSCC.htm">GabowSCC</a></td><td><div class="summary"><p>
             The <span class="code">GabowSCC</span> class represents a data type for
             determining the strong components in a digraph.
             The <span class="code">Id</span> operation determines in which strong component
             a given vertex lies; the <span class="code">AreStronglyConnected</span> operation
             determines whether two vertices are in the same strong component;
             and the <span class="code">Count</span> operation determines the number of strong
             components.</p><p>
             The <span class="code">Component identifier</span> of a component is one of the
             vertices in the strong component: two vertices have the same component
             identifier if and only if they are in the same strong component.
             </p><p>
             This implementation uses the Gabow's algorithm.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>
             (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">Id</span>, <span class="code">Count</span>, and <span class="code">AreStronglyConnected</span>
             operations take constant time.</p><p>
             For alternate implementations of the same API, see
              and .
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_GaussianElimination.htm">GaussianElimination</a></td><td><div class="summary"><p>
             The <span class="code">GaussianElimination</span> data type provides methods
             to solve a linear system of equations <span class="code">Ax</span> = <span class="code">B</span>,
             where <span class="code">A</span> is an <span class="code">M</span>-by-<span class="code">N</span> matrix
             and <span class="code">B</span> is a length <span class="code">N</span> vector.
             </p><p>
             This is a bare-bones implementation that uses Gaussian elimination
             with partial pivoting.
             See <a href="http://algs4.cs.princeton.edu/99scientific/GaussianEliminationLite.java.html">GaussianEliminationLite.java</a>
             for a stripped-down version that assumes the matrix <span class="code">A</span> is square
             and nonsingular. See  for an alternate
             implementation that uses Gauss-Jordan elimination.
             For an industrial-strength numerical linear algebra library,
             see <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a>.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_GaussJordanElimination.htm">GaussJordanElimination</a></td><td><div class="summary"><p>
             The <span class="code">GaussJordanElimination</span> data type provides methods
             to solve a linear system of equations <span class="code">Ax</span> = <span class="code">B</span>,
             where <span class="code">A</span> is an <span class="code">N</span>-by-<span class="code">N</span> matrix
             and <span class="code">B</span> is a length <span class="code">N</span> vector.
             If no solution exists, it finds a solution <span class="code">Y</span> to
             <span class="code">YA</span> = 0, <span class="code">Yb</span> != 0, which
             which serves as a certificate of infeasibility.
             </p><p>
             This implementation uses Gauss-Jordan elimination with partial pivoting.
             See  for an implementation that uses
             Gaussian elimination (but does not provide the certificate of infeasibility).
             For an industrial-strength numerical linear algebra library,
             see <a href="http://math.nist.gov/javanumerics/jama/">JAMA</a>. 
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Genome.htm">Genome</a></td><td><div class="summary">
             The <span class="code">Genome</span> class provides static methods for compressing
             and expanding a genomic sequence using a 2-bit code.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_GrahamScan.htm">GrahamScan</a></td><td><div class="summary"><p>
             The <span class="code">GrahamScan</span> data type provides methods for computing the
             convex hull of a set of <span class="code">N</span> points in the plane.
             </p><p>
             The implementation uses the Graham-Scan convex hull algorithm.
             It runs in O(<span class="code">N</span> log <span class="code">N</span>) time in the worst case
             and uses O(<span class="code">N</span>) extra memory.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Graph.htm">Graph</a></td><td><div class="summary"><p>
             The <span class="code">Graph</span> class represents an undirected graph of vertices
             named 0 through <span class="code">V - 1</span>.
             It supports the following two primary operations: add an edge to the graph,
             iterate over all of the vertices adjacent to a vertex. It also provides
             methods for returning the number of vertices <span class="code">V</span> and the number
             of edges <span class="code">E</span>. Parallel edges and self-loops are permitted.
             </p><p>
             This implementation uses an adjacency-lists representation, which 
             is a vertex-indexed array of  objects.
             All operations take constant time (in the worst case) except
             iterating over the vertices adjacent to a given vertex, which takes
             time proportional to the number of such vertices.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_GraphGenerator.htm">GraphGenerator</a></td><td><div class="summary">
             The <span class="code">GraphGenerator</span> class provides static methods for creating
             various graphs, including Erdos-Renyi random graphs, random bipartite
             graphs, random k-regular graphs, and random rooted trees.
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_GREP.htm">GREP</a></td><td><div class="summary">
             The <span class="code">GREP</span> class provides a client for reading in a sequence of
             lines from standard input and printing to standard output those lines
             that contain a substring matching a specified regular expression.
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Heap.htm">Heap</a></td><td><div class="summary">
             The <span class="code">Heap</span> class provides a static methods for heapsorting an array.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_HelpTextAttribute.htm">HelpTextAttribute</a></td><td><div class="summary">
            Provides help text for a method, mainly used for decorating the demo tests
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_HexDump.htm">HexDump</a></td><td><div class="summary"><p>
             The <span class="code">HexDump</span> class provides a client for displaying the contents
             of a binary file in hexadecimal.</p><p>
             See also . For more full-featured versions, 
             see the Unix utilities
             <span class="code">od</span> (octal dump) and <span class="code">hexdump</span> (hexadecimal dump).
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_HopcroftKarp.htm">HopcroftKarp</a></td><td><div class="summary"><p>
             The <span class="code">HopcroftKarp</span> class represents a data type for computing a
             <span class="code">Maximum (cardinality) matching</span> and a
             <span class="code">Minimum (cardinality) vertex cover</span> in a bipartite graph.
             A <span class="code">Bipartite graph</span> in a graph whose vertices can be partitioned
             into two disjoint sets such that every edge has one endpoint in either set.
             A <span class="code">Matching</span> in a graph is a subset of its edges with no common
             vertices. A <span class="code">Maximum matching</span> is a matching with the maximum number
             of edges.</p><p>
             A <span class="code">Perfect matching</span> is a matching which matches all vertices in the graph.
             A <span class="code">Vertex cover</span> in a graph is a subset of its vertices such that
             every edge is incident to at least one vertex. A <span class="code">Minimum vertex cover</span>
             is a vertex cover with the minimum number of vertices.
             By Konig's theorem, in any biparite
             graph, the maximum number of edges in matching equals the minimum number
             of vertices in a vertex cover.
             The maximum matching problem in <span class="code">Nonbipartite</span> graphs is
             also important, but all known algorithms for this more general problem
             are substantially more complicated.
             </p><p>
             This implementation uses the <span class="code">Hopcroft-Karp algorithm</span>.
             The order of growth of the running time in the worst case is
             (<span class="code">E</span> + <span class="code">V</span>) sqrt(<span class="code">V</span>),
             where <span class="code">E</span> is the number of edges and <span class="code">V</span> is the number
             of vertices in the graph. It uses extra space (not including the graph)
             proportional to <span class="code">V</span>.
             </p><p>
             See also , which solves the problem in
             O(<span class="code">E V</span>) time using the <span class="code">Alternating path algorithm</span>
             and <a href="http://algs4.cs.princeton.edu/65reductions/BipartiteMatchingToMaxflow.java.html">BipartiteMatchingToMaxflow</a>,
             which solves the problem in O(<span class="code">E V</span>) time via a reduction
             to the maxflow problem.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Huffman.htm">Huffman</a></td><td><div class="summary">
             The <span class="code">Huffman</span> class provides methods for compressing
             and expanding a binary input using Huffman codes over the 8-bit extended
             ASCII alphabet.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_IndexMaxPQ_1.htm">IndexMaxPQ<span id="LSTFAD1909E_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_20?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key<span id="LSTFAD1909E_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_21?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">IndexMaxPQ</span> class represents an indexed priority queue of generic keys.
             It supports the usual <span class="code">Insert</span> and <span class="code">Delete-the-maximum</span>
             operations, along with <span class="code">Delete</span> and <span class="code">Change-the-key</span> 
             methods. In order to let the client refer to items on the priority queue,
             an integer between 0 and maxN-1 is associated with each key. The client
             uses this integer to specify which key to delete or change.
             It also supports methods for peeking at a maximum key,
             testing if the priority queue is empty, and iterating through
             the keys.</p><p>
             This implementation uses a binary heap along with an array to associate
             keys with integers in the given range.
             The <span class="code">Insert</span>, <span class="code">Delete-the-maximum</span>, <span class="code">Delete</span>,
             <span class="code">Change-key</span>, <span class="code">Decrease-key</span>, and <span class="code">Increase-key</span>
             operations take logarithmic time.
             The <span class="code">IsEmpty</span>, <span class="code">Count</span>, <span class="code">Max-index</span>, <span class="code">Max-key</span>, and <span class="code">Key-of</span>
             operations take constant time.
             Construction takes time proportional to the specified capacity.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_IndexMinPQ_1.htm">IndexMinPQ<span id="LSTFAD1909E_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_22?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key<span id="LSTFAD1909E_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_23?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">IndexMinPQ</span> class represents an indexed priority queue of generic keys.
             It supports the usual <span class="code">Insert</span> and <span class="code">Delete-the-minimum</span>
             operations, along with <span class="code">Delete</span> and <span class="code">Change-the-key</span>
             methods. In order to let the client refer to keys on the priority queue,
             an integer between 0 and maxN-1 is associated with each key-the client
             uses this integer to specify which key to delete or change.
             It also supports methods for peeking at the minimum key,
             testing if the priority queue is empty, and iterating through
             the keys.</p><p>
             This implementation uses a binary heap along with an array to associate
             keys with integers in the given range.
             The <span class="code">Insert</span>, <span class="code">Delete-the-minimum</span>, <span class="code">Delete</span>,
             <span class="code">Change-key</span>, <span class="code">Decrease-key</span>, and <span class="code">Increase-key</span>
             operations take logarithmic time.
             The <span class="code">Is-empty</span>, <span class="code">Count</span>, <span class="code">Min-index</span>, <span class="code">Min-key</span>, and <span class="code">Key-of</span>
             operations take constant time.
             Construction takes time proportional to the specified capacity.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Insertion.htm">Insertion</a></td><td><div class="summary"><p>
             The <span class="code">Insertion</span> class provides static methods for sorting an
             array using insertion sort.
             </p><p>
             This implementation makes ~ 1/2 N^2 compares and OrderHelper.Exchanges in
             the worst case, so it is not suitable for sorting large arbitrary arrays.
             More precisely, the number of OrderHelper.Exchanges is exactly equal to the number
             of inversions. So, for example, it sorts a partially-sorted array
             in linear time.
             </p><p>
             The sorting algorithm is stable and uses O(1) extra memory.
             </p><p>
             See <a href="http://algs4.cs.princeton.edu/21elementary/InsertionPedantic.java.html">InsertionPedantic.java</a>
             for a version that eliminates the compiler warning.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_InsertionX.htm">InsertionX</a></td><td><div class="summary">
             The <span class="code">InsertionX</span> class provides static methods for sorting
             an array using an optimized version of insertion sort (with half exchanges
             and a sentinel).
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Interval1D.htm">Interval1D</a></td><td><div class="summary">
             The <span class="code">Interval1D</span> class represents a one-dimensional interval.
             The interval is <span class="code">Closed</span>, which contains both endpoints.
             Intervals are immutable: their values cannot be changed after they are created.
             The class <span class="code">Interval1D</span> includes methods for checking whether
             an interval contains a point and determining whether two intervals intersect.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Interval2D.htm">Interval2D</a></td><td><div class="summary">
             The <span class="code">Interval2D</span> class represents a closed two-dimensional interval,
             which represents all points (x, y) with both xmin &lt;= x &lt;= xmax and
             ymin &lt;= y &lt;= ymax.
             Two-dimensional intervals are immutable: their values cannot be changed
             after they are created.
             The class <span class="code">Interval2D</span> includes methods for checking whether
             a two-dimensional interval contains a point and determining whether
             two two-dimensional intervals intersect.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_KMP.htm">KMP</a></td><td><div class="summary"><p>
             The <span class="code">KMP</span> class finds the first occurrence of a pattern string
             in a text string.</p><p>
             This implementation uses a version of the Knuth-Morris-Pratt substring search
             algorithm. The version takes time as space proportional to
             <span class="code">N</span> + <span class="code">M R</span> in the worst case, where <span class="code">N</span> is the length
             of the text string, <span class="code">M</span> is the length of the pattern, and <span class="code">R</span>
             is the alphabet size.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Knuth.htm">Knuth</a></td><td><div class="summary"><p>
             The <span class="code">Knuth</span> class provides a client for reading in a
             sequence of strings and <span class="code">Shuffling</span> them using the Knuth (or Fisher-Yates)
             shuffling algorithm. This algorithm guarantees to rearrange the
             elements in uniformly random order, under
             the assumption that Math.random() generates independent and
             uniformly distributed numbers between 0 and 1.</p><p>
             See  for versions that shuffle arrays and
             subarrays of objects, doubles, and ints.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_KosarajuSharirSCC.htm">KosarajuSharirSCC</a></td><td><div class="summary"><p>
             The <span class="code">KosarajuSharirSCC</span> class represents a data type for
             determining the strong components in a digraph.
             The <span class="code">Id</span> operation determines in which strong component
             a given vertex lies; the <span class="code">AreStronglyConnected</span> operation
             determines whether two vertices are in the same strong component;
             and the <span class="code">Count</span> operation determines the number of strong
             components.
             The <span class="code">Component identifier</span> of a component is one of the
             vertices in the strong component: two vertices have the same component
             identifier if and only if they are in the same strong component.
             </p><p>
             This implementation uses the Kosaraju-Sharir algorithm.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>
             (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">Id</span>, <span class="code">Count</span>, and <span class="code">AreStronglyConnected</span>
             operations take constant time.
             For alternate implementations of the same API, see
              and .
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_KruskalMST.htm">KruskalMST</a></td><td><div class="summary"><p>
             The <span class="code">KruskalMST</span> class represents a data type for computing a
             <span class="code">Minimum spanning tree</span> in an edge-weighted graph.
             The edge weights can be positive, zero, or negative and need not
             be distinct. If the graph is not connected, it computes a <span class="code">Minimum
             spanning forest</span>, which is the union of minimum spanning trees
             in each connected component. The <span class="code">weight()</span> property returns the 
             weight of a minimum spanning tree and the <span class="code">Edge()</span> property
             returns its edges.</p><p>
             This implementation uses <span class="code">Krusal's algorithm</span> and the
             union-find data type.
             The constructor takes time proportional to <span class="code">E</span> log <span class="code">E</span>
             and extra space (not including the graph) proportional to <span class="code">V</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">Weight</span> property takes constant time
             and the <span class="code">Edges</span> method takes time proportional to <span class="code">V</span>.
             </p><p>
             For alternate implementations, see , ,
             and .</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_KWIK.htm">KWIK</a></td><td><div class="summary">
             The <span class="code">KWIK</span> class provides a  client for computing
             all occurrences of a keyword in a given string, with surrounding context.
             This is known as <span class="code">Keyword-in-context search</span>.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LazyPrimMST.htm">LazyPrimMST</a></td><td><div class="summary"><p>
             The <span class="code">LazyPrimMST</span> class represents a data type for computing a
             <span class="code">Minimum spanning tree</span> in an edge-weighted graph.
             The edge weights can be positive, zero, or negative and need not
             be distinct. If the graph is not connected, it computes a <span class="code">Minimum
             spanning forest</span>, which is the union of minimum spanning trees
             in each connected component. The <span class="code">weight()</span> method returns the 
             weight of a minimum spanning tree and the <span class="code">edges()</span> method
             returns its edges.</p><p>
             This implementation uses a lazy version of <span class="code">Prim's algorithm</span>
             with a binary heap of edges.
             The constructor takes time proportional to <span class="code">E</span> log <span class="code">E</span>
             and extra space (not including the graph) proportional to <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">weight()</span> method takes constant time
             and the <span class="code">edges()</span> method takes time proportional to <span class="code">V</span>.
             </p><p>
             For alternate implementations, see , ,
             and .</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LinearProbingHashST_2.htm">LinearProbingHashST<span id="LSTFAD1909E_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_24?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key, Value<span id="LSTFAD1909E_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_25?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">LinearProbingHashST</span> class represents a symbol table of generic
             key-value pairs.
             It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Indexer</span>, <span class="code">Contains</span>,
             <span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
             It also provides a <span class="code">Keys</span> method for iterating over all of the keys.
             A symbol table implements the <span class="code">Associative array</span> abstraction:
             when associating a value with a key that is already in the symbol table,
             the convention is to replace the old value with the new value.
             Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_26?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_27?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
             values cannot be <span class="code">null</span>. Setting the
             value associated with a key to <span class="code">null</span> is equivalent to deleting the key
             from the symbol table.</p><p>
             This implementation uses a linear probing hash table. It requires that
             the key type overrides the <span class="code">Equals()</span> and <span class="code">GetHashCode()</span> methods.
             The expected time per <span class="code">Put</span>, <span class="code">Contains</span>, or <span class="code">Remove</span>
             operation is constant, subject to the uniform hashing assumption.
             The <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
             Construction takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LinearProgramming.htm">LinearProgramming</a></td><td><div class="summary"><p>
             The <span class="code">LinearProgramming</span> class represents a data type for solving a
             linear program of the form { max cx : Ax &lt;= b, x &gt;= 0 }, where A is a M-by-N
             matrix, b is an M-length vector, and c is an N-length vector. For simplicity,
             we assume that A is of full rank and that b &gt;= 0 so that x = 0 is a basic
             feasible soution.</p><p>
             The data type supplies methods for determining the optimal primal and
             dual solutions.</p><p>
             This is a bare-bones implementation of the <span class="code">Simplex algorithm</span>.
             It uses Bland's rule to determing the entering and leaving variables.
             It is not suitable for use on large inputs. It is also not robust
             in the presence of floating-point roundoff error.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LinearRegression.htm">LinearRegression</a></td><td><div class="summary">
             The <span class="code">LinearRegression</span> class performs a simple linear regression
             on an set of <span class="code">N</span> data points (<span class="code">Y<sub>i</sub></span>, <span class="code">X<sub>i</sub></span>).
             That is, it fits a straight line <span class="code">Y</span> = α + β <span class="code">X</span>,
             (where <span class="code">Y</span> is the response variable, <span class="code">X</span> is the predictor variable,
             α is the <span class="code">Y-intercept</span>, and β is the <span class="code">Slope</span>)
             that minimizes the sum of squared residuals of the linear regression model.
             It also computes associated statistics, including the coefficient of
             determination <span class="code">R</span><sup>2</sup> and the standard deviation of the
             estimates for the slope and <span class="code">Y</span>-intercept.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LinkedQueue_1.htm">LinkedQueue<span id="LSTFAD1909E_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_28?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_29"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_29?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>The <span class="code">LinkedQueue</span> class represents a first-in-first-out (FIFO)
             queue of generic items. So named to avoid conflict with the .NET framwork 
             <a href="http://msdn2.microsoft.com/en-us/library/7977ey2c" target="_blank">Queue<span id="LSTFAD1909E_30"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_30?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTFAD1909E_31"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_31?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> class. Since C# does not allow an inner static class with
             instances, the implementation is effectively the same as the 
             <a href="http://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Queue.java.html">Queue</a>
             class implementation.</p><p>
             It supports the usual <span class="code">Enqueue</span> and <span class="code">Dequeue</span>
             operations, along with methods for peeking at the first item,
             testing if the queue is empty, and iterating through
             the items in FIFO order.
             </p><p>
             This implementation uses a singly-linked list with a nested, non-static
             class Node and hence is the same as the <span class="code">Queue</span> class in algs4.jar.
             The <span class="code">Enqueue</span>, <span class="code">Dequeue</span>, <span class="code">Peek</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span>
             operations all take constant time in the worst case.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LinkedStack_1.htm">LinkedStack<span id="LSTFAD1909E_32"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_32?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_33"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_33?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">LinkedStack</span> class represents a last-in-first-out (LIFO) stack of
             generic items. So named to avoid conflict with the .NET framwork 
             <a href="http://msdn2.microsoft.com/en-us/library/3278tedw" target="_blank">Stack<span id="LSTFAD1909E_34"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_34?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTFAD1909E_35"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_35?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> class. Since C# strictly does not allow static class with
             instances, the implementation is effectively the same as the
             <a href="http://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Stack.java.html">Stack</a>
             class implementation.</p><p>
             It supports the usual <span class="code">Push</span> and <span class="code">Pop</span> operations, along with methods
             for peeking at the top item, testing if the stack is empty, and iterating through
             the items in LIFO order.
             </p><p>
             This implementation uses a singly-linked list with a nested, non-static
             class Node and hence is the same as the <span class="code">Stack</span> class in algs4.jar.
             The <span class="code">Push</span>, <span class="code">Pop</span>, <span class="code">Peek</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span>
             operations all take constant time in the worst case.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LongestCommonSubstring.htm">LongestCommonSubstring</a></td><td><div class="summary"><p>
             The <span class="code">LongestCommonSubstring</span> class provides a 
             client for computing the longest common substring that appears in two
             given strings.</p><p>
             This implementation computes the suffix array of each string and applies a
             merging operation to determine the longest common substring.
             For an alternate implementation, see
             <a href="http://algs4.cs.princeton.edu/63suffix/LongestCommonSubstringConcatenate.java.html">LongestCommonSubstringConcatenate.java</a>.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LongestRepeatedSubstring.htm">LongestRepeatedSubstring</a></td><td><div class="summary">
             The <span class="code">LongestRepeatedSubstring</span> class provides a 
             client for computing the longest repeated substring of a string that
             appears at least twice. The repeated substrings may overlap (but must
             be distinct). See also .</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LookupCSV.htm">LookupCSV</a></td><td><div class="summary">
             The <span class="code">LookupCSV</span> class provides a data-driven client for reading in a
             key-value pairs from a file; then, printing the values corresponding to the
             keys found on standard input. Both keys and values are strings.
             The fields to serve as the key and value are taken as command-line arguments.
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LookupIndex.htm">LookupIndex</a></td><td><div class="summary">
             The <span class="code">LookupIndex</span> class provides a data-driven client for reading in a
             key-value pairs from a file; then, printing the values corresponding to the
             keys found on standard input. Keys are strings; values are lists of strings.
             The separating delimiter is taken as a command-line argument. This client
             is sometimes known as an <span class="code">Inverted index</span>.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LSD.htm">LSD</a></td><td><div class="summary">
             The <span class="code">LSD</span> class provides static methods for sorting an
             array of W-character strings or 32-bit integers using LSD radix sort.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_LZW.htm">LZW</a></td><td><div class="summary">
             The <span class="code">LZW</span> class provides methods for compressing
             and expanding a binary input using LZW compression over the 8-bit extended
             ASCII alphabet with 12-bit codewords.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_MaxPQ_1.htm">MaxPQ<span id="LSTFAD1909E_36"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_36?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key<span id="LSTFAD1909E_37"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_37?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">MaxPQ</span> class represents a priority queue of generic keys.
             It supports the usual <span class="code">Insert</span> and <span class="code">Delete-the-maximum</span>
             operations, along with methods for peeking at the maximum key,
             testing if the priority queue is empty, and iterating through
             the keys.</p><p>This implementation uses a binary heap.
             The <span class="code">Insert</span> and <span class="code">Delete-the-maximum</span> operations take
             logarithmic amortized time.
             The <span class="code">Max</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
             Construction takes time proportional to the specified capacity or the number of
             items used to initialize the data structure.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Merge.htm">Merge</a></td><td><div class="summary">
             The <span class="code">Merge</span> class provides static methods for sorting an
             array using mergesort. For an optimized version, try MergeX.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_MergeBU.htm">MergeBU</a></td><td><div class="summary">
             The <span class="code">MergeBU</span> class provides static methods for sorting an
             array using bottom-up mergesort.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_MergeX.htm">MergeX</a></td><td><div class="summary">
             The <span class="code">MergeX</span> class provides static methods for sorting an
             array using an optimized version of mergesort.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_MinPQ_1.htm">MinPQ<span id="LSTFAD1909E_38"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_38?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key<span id="LSTFAD1909E_39"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_39?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">MinPQ</span> class represents a priority queue of generic keys.
             It supports the usual <span class="code">Insert</span> and <span class="code">Delete-the-minimum</span>
             operations, along with methods for peeking at the minimum key,
             testing if the priority queue is empty, and iterating through
             the keys.</p><p>This implementation uses a binary heap.
             The <span class="code">Insert</span> and <span class="code">Delete-the-minimum</span> operations take
             logarithmic amortized time.
             The <span class="code">Min</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
             Construction takes time proportional to the specified capacity or the number of
             items used to initialize the data structure.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_MSD.htm">MSD</a></td><td><div class="summary">
             The <span class="code">MSD</span> class provides static methods for sorting an
             array of extended ASCII strings or integers using MSD radix sort.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Multiway.htm">Multiway</a></td><td><div class="summary">
             The <span class="code">Multiway</span> class provides a client for reading in several
             sorted text files and merging them together into a single sorted
             text stream.
             This implementation uses a  to perform the multiway
             merge.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_NFA.htm">NFA</a></td><td><div class="summary"><p>The <span class="code">NFA</span> class provides a data type for creating a
             <span class="code">Nondeterministic finite state automaton</span> (NFA) from a regular
             expression and testing whether a given string is matched by that regular
             expression.
             It supports the following operations: <span class="code">Concatenation</span>,
             <span class="code">Closure</span>, <span class="code">Binary or</span>, and <span class="code">Parentheses</span>.
             It does not support <span class="code">Mutiway or</span>, <span class="code">Character classes</span>,
             <span class="code">Metacharacters</span> (either in the text or pattern),
             <span class="code">Capturing capabilities</span>, <span class="code">Greedy</span> or <span class="code">Relucantant</span>
             modifiers, and other features in industrial-strength implementations
             such as <a href="http://msdn2.microsoft.com/en-us/library/6f7hht7k" target="_blank">Regex</a>and <a href="http://msdn2.microsoft.com/en-us/library/20cdsf18" target="_blank">Match</a>.
             </p><p>This implementation builds the NFA using a digraph and a stack
             and simulates the NFA using digraph search (see the textbook for details).
             The constructor takes time proportional to <span class="code">M</span>, where <span class="code">M</span>
             is the number of characters in the regular expression.
             The <span class="code">Recognizes</span> method takes time proportional to <span class="code">M N</span>,
             where <span class="code">N</span> is the number of characters in the text.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_NonrecursiveDFS.htm">NonrecursiveDFS</a></td><td><div class="summary"><p>
             The <span class="code">NonrecursiveDFS</span> class represents a data type for finding
             the vertices connected to a source vertex <span class="code">S</span> in the undirected
             graph.</p><p>
             This implementation uses a nonrecursive version of depth-first search
             with an explicit stack and the path tracing feature found in <a href="T_Algs4Net_DepthFirstPaths.htm">DepthFirstPaths</a>.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             It uses extra space (not including the graph) proportional to <span class="code">V</span>.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_NonrecursiveDirectedDFS.htm">NonrecursiveDirectedDFS</a></td><td><div class="summary"><p>
             The <span class="code">NonrecursiveDirectedDFS</span> class represents a data type for finding
             the vertices reachable from a source vertex <span class="code">S</span> in the digraph. This
             implementation uses a nonrecursive version of depth-first search
             with an explicit stack.</p><p>
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             It uses extra space (not including the digraph) proportional to <span class="code">V</span>.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Particle.htm">Particle</a></td><td><div class="summary">
             The <span class="code">Particle</span> class represents a particle moving in the unit box,
             with a given position, velocity, Radius, and Mass. Methods are provided
             for moving the particle and for predicting and resolvling elastic
             collisions with vertical walls, horizontal walls, and other particles.
             This data type is mutable because the position and velocity change.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Point2D.htm">Point2D</a></td><td><div class="summary">
             The <span class="code">Point</span> class is an immutable data type to encapsulate a
             two-dimensional point with real-value coordinates. In order to deal with
             the difference behavior of double with respect to -0.0 and +0.0, the 
             Point2D constructor converts any coordinates that are -0.0 to +0.0.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_PrimMST.htm">PrimMST</a></td><td><div class="summary"><p>
             The <span class="code">PrimMST</span> class represents a data type for computing a
             <span class="code">Minimum spanning tree</span> in an edge-weighted graph.
             The edge weights can be positive, zero, or negative and need not
             be distinct. If the graph is not connected, it computes a <span class="code">Minimum
             spanning forest</span>, which is the union of minimum spanning trees
             in each connected component. The <span class="code">Weight</span> property returns the 
             weight of a minimum spanning tree and the <span class="code">Edges</span> property
             returns its edges.</p><p>
             This implementation uses <span class="code">Prim's algorithm</span> with an indexed
             binary heap.
             The constructor takes time proportional to <span class="code">E</span> log <span class="code">V</span>
             and extra space (not including the graph) proportional to <span class="code">V</span>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">Weight</span> property takes constant time
             and the <span class="code">Edges</span> method takes time proportional to <span class="code">V</span>.
             </p><p>For alternate implementations, see , 
             , and .</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Quick.htm">Quick</a></td><td><div class="summary">
             The <span class="code">Quick</span> class provides static methods for sorting an
             array and selecting the ith smallest element in an array using quicksort.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Quick3string.htm">Quick3string</a></td><td><div class="summary">
             The <span class="code">Quick3string</span> class provides static methods for sorting an
             array of strings using 3-way radix quicksort.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Quick3way.htm">Quick3way</a></td><td><div class="summary">
             The <span class="code">Quick3way</span> class provides static methods for sorting an
             array using quicksort with 3-way partitioning.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_QuickFindUF.htm">QuickFindUF</a></td><td><div class="summary"><p>
             The <span class="code">QuickFindUF</span> class represents a <span class="code">Union-find data type</span>
             (also known as the <span class="code">Disjoint-sets data type</span>).
             It supports the <span class="code">Union</span> and <span class="code">Find</span> operations,
             along with a <span class="code">Connected</span> operation for determining whether
             two sites are in the same component and a <span class="code">Count</span> operation that
             returns the total number of components.</p><p>
             The union-find data type models connectivity among a set of <span class="code">N</span>
             sites, named 0 through <span class="code">N</span> - 1. The <span class="code">Is-connected-to</span> relation must be an 
             <span class="code">Equivalence relation</span> (see text).</p><p>An equivalence relation partitions the sites into
             <span class="code">Equivalence classes</span> (or <span class="code">Components</span>). In this case,
             two sites are in the same component if and only if they are connected.
             Both sites and components are identified with integers between 0 and
             <span class="code">N</span> - 1. 
             Initially, there are <span class="code">N</span> components, with each site in its
             own component.  The <span class="code">Component identifier</span> of a component
             (also known as the <span class="code">Root</span>, <span class="code">Canonical element</span>, <span class="code">Leader</span>,
             or <span class="code">Set representative</span>) is one of the sites in the component:
             two sites have the same component identifier if and only if they are
             in the same component.</p><ul><li><em>union</em>(<em>p</em>, <em>q</em>) adds a
                    connection between the two sites <span class="code">P</span> and <span class="code">Q</span>.
                    If <span class="code">P</span> and <span class="code">Q</span> are in different components,
                    then it replaces
                    these two components with a new component that is the union of
                    the two.</li><li><em>find</em>(<em>p</em>) returns the component
                    identifier of the component containing <span class="code">P</span>.</li><li><em>connected</em>(<em>p</em>, <em>q</em>)
                    returns true if both <span class="code">P</span> and <span class="code">Q</span>
                    are in the same component, and false otherwise.</li><li><em>count</em>() returns the number of components.</li></ul><p>
             The component identifier of a component can change
             only when the component itself changes during a call to
             <span class="code">Union</span>; it cannot change during a call
             to <span class="code">Find</span>, <span class="code">Connected</span>, or <span class="code">Count</span>.</p><p>
             This implementation uses quick find.
             Initializing a data structure with <span class="code">N</span> sites takes linear time.
             Afterwards, the <span class="code">Find</span>, <span class="code">Connected</span>, and <span class="code">Count</span>
             operations take constant time but the <span class="code">Union</span> operation
             takes linear time.</p><p>
             For alternate implementations of the same API, see
             , , and .
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_QuickUnionUF.htm">QuickUnionUF</a></td><td><div class="summary"><p>
             The <span class="code">QuickUnionUF</span> class represents a <span class="code">Union-find data type</span>
             (also known as the <span class="code">Disjoint-sets data type</span>).
             It supports the <span class="code">Union</span> and <span class="code">Find</span> operations,
             along with a <span class="code">Connected</span> operation for determining whether
             two sites are in the same component and a <span class="code">Count</span> operation that
             returns the total number of components.
             </p><p>
             The union-find data type models connectivity among a set of <span class="code">N</span>
             sites, named 0 through <span class="code">N</span> - 1. The <span class="code">Is-connected-to</span> relation 
             must be an <span class="code">Equivalence relation</span> that partitions the sites into
             <span class="code">Equivalence classes</span> (or <span class="code">Components</span>). In this case,
             two sites are in the same component if and only if they are connected.
             Both sites and components are identified with integers between 0 and
             <span class="code">N</span>- 1.</p><p> 
             Initially, there are <span class="code">N</span> components, with each site in its
             own component.  The <span class="code">Component identifier</span> of a component
             (also known as the <span class="code">Root</span>, <span class="code">Canonical element</span>, <span class="code">Leader</span>,
             or <span class="code">Set representative</span>) is one of the sites in the component:
             two sites have the same component identifier if and only if they are
             in the same component.</p><ul><li><em>union</em>(<em>p</em>, <em>q</em>) adds a
                    connection between the two sites <span class="code">P</span> and <span class="code">Q</span>.
                    If <span class="code">P</span> and <span class="code">Q</span> are in different components,
                    then it replaces
                    these two components with a new component that is the union of
                    the two.</li><li><em>find</em>(<em>p</em>) returns the component
                    identifier of the component containing <span class="code">P</span>.</li><li><em>connected</em>(<em>p</em>, <em>q</em>)
                    returns true if both <span class="code">P</span> and <span class="code">Q</span>
                    are in the same component, and false otherwise.</li><li><em>count</em>() returns the number of components.</li></ul><p>The component identifier of a component can change
             only when the component itself changes during a call to
             <span class="code">Union</span>; it cannot change during a call
             to <span class="code">Find</span>, <span class="code">Connected</span>, or <span class="code">Count</span>.
             </p><p>
             This implementation uses quick union.
             Initializing a data structure with <span class="code">N</span> sites takes linear time.
             Afterwards, the <span class="code">Union</span>, <span class="code">Find</span>, and <span class="code">Connected</span>
             operations  take linear time (in the worst case) and the
             <span class="code">Count</span> operation takes constant time.</p><p>
             For alternate implementations of the same API, see
             , , and .</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_QuickX.htm">QuickX</a></td><td><div class="summary">
             The <span class="code">QuickX</span> class provides static methods for sorting an
             array using an optimized version of quicksort (using Bentley-McIlroy
             3-way partitioning, Tukey's ninther, and cutoff to insertion sort).</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_RabinKarp.htm">RabinKarp</a></td><td><div class="summary">
             The <span class="code">RabinKarp</span> class finds the first occurrence of a pattern string
             in a text string. This implementation uses the Rabin-Karp algorithm.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_RandomSeq.htm">RandomSeq</a></td><td><div class="summary">
             The <span class="code">RandomSeq</span> class is a client that prints out a pseudorandom
             sequence of real numbers in a given range.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_RectHV.htm">RectHV</a></td><td><div class="summary">
             The <span class="code">RectHV</span> class is an immutable data type to encapsulate a
             two-dimensional axis-aligned rectagle with real-value coordinates.
             The rectangle is <span class="code">Closed</span>; it includes the points on the boundary.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_RedBlackBST_2.htm">RedBlackBST<span id="LSTFAD1909E_40"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_40?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key, Value<span id="LSTFAD1909E_41"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_41?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
            The <span class="code">BST</span> class represents an ordered symbol table of generic
            key-value pairs.
            It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Indexer</span>, <span class="code">Contains</span>,
            <span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
            It also provides ordered methods for finding the <span class="code">Minimum</span>,
            <span class="code">Maximum</span>, <span class="code">Floor</span>, and <span class="code">Ceiling</span>.
            It also provides a <span class="code">Keys</span> method for iterating over all of the keys.
            A symbol table implements the <span class="code">Associative array</span> abstraction:
            when associating a value with a key that is already in the symbol table,
            the convention is to replace the old value with the new value.
            Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_42"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_42?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_43"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_43?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
            values cannot be <span class="code">null</span>. Setting the
            value associated with a key to <span class="code">null</span> is equivalent to deleting the key
            from the symbol table.</p><p>This implementation uses a left-leaning red-black BST. It requires that
            the key type implements the <span class="code">Comparable</span> interface and calls the
            <span class="code">compareTo()</span> and method to compare two keys. It does not call either
            <span class="code">equals()</span> or <span class="code">GetHashCode()</span>.
            The <span class="code">Put</span>, <span class="code">Contains</span>, <span class="code">Remove</span>, <span class="code">Minimum</span>,
            <span class="code">Maximum</span>, <span class="code">Ceiling</span>, and <span class="code">Floor</span> operations each take
            logarithmic time in the worst case, if the tree becomes unbalanced.
            The <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
            Construction takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_ResizingArrayBag_1.htm">ResizingArrayBag<span id="LSTFAD1909E_44"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_44?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_45"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_45?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">ResizingArrayBag</span> class represents a bag (or multiset) of
             generic items. It supports insertion and iterating over the 
             items in arbitrary order.</p><p>
             This implementation uses a resizing array.
             See  for a version that uses a singly-linked list.
             The <span class="code">Add</span> operation takes constant amortized time; the
             <span class="code">IsEmpty</span>, and <span class="code">Count</span> operations
             take constant time. Iteration takes time proportional to the number of items.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_ResizingArrayQueue_1.htm">ResizingArrayQueue<span id="LSTFAD1909E_46"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_46?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_47"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_47?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">ResizingArrayQueue</span> class represents a first-in-first-out (FIFO)
             queue of generic items.
             It supports the usual <span class="code">Enqueue</span> and <span class="code">Dequeue</span>
             operations, along with methods for peeking at the first item,
             testing if the queue is empty, and iterating through
             the items in FIFO order.</p><p>
             This implementation uses a resizing array, which double the underlying array
             when it is full and halves the underlying array when it is one-quarter full.
             The <span class="code">Enqueue</span> and <span class="code">Dequeue</span> operations take constant amortized time.
             The <span class="code">Count</span>, <span class="code">Peek</span>, and <span class="code">IsEmpty</span> operations takes
             constant time in the worst case.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_ResizingArrayStack_1.htm">ResizingArrayStack<span id="LSTFAD1909E_48"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_48?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_49"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_49?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>The <span class="code">ResizingArrayStack</span> class represents a (LIFO)
            stack of generic items. It supports the usual <span class="code">Push</span> and <span class="code">Pop</span>
            operations, along with methods for peeking at the top item, testing if 
            the stack is empty, and iterating through the items in LIFO order.</p><p>This implementation uses a resizing array, which double the  
            underlying array when it is full and halves the underlying array when it
            is one-quarter full. The <span class="code">Push</span> and <span class="code">Pop</span> operations take 
            constant amortized time, whereas he <span class="code">Count</span>, <span class="code">Peek</span>, and 
            <span class="code">IsEmpty</span> operations takes constant time in the worst case.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_RunLength.htm">RunLength</a></td><td><div class="summary">
             The <span class="code">RunLength</span> class provides methods for compressing
             and expanding a binary input using run-length coding with 8-bit
             run lengths.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Selection.htm">Selection</a></td><td><div class="summary">
             The <span class="code">Selection</span> class provides static methods for sorting an
             array using selection sort.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_SeparateChainingHashST_2.htm">SeparateChainingHashST<span id="LSTFAD1909E_50"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_50?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key, Value<span id="LSTFAD1909E_51"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_51?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">SeparateChainingHashST</span> class represents a symbol table of generic
             key-value pairs.
             It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Contains</span>,
             <span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
             It also provides a <span class="code">Keys</span> method for iterating over all of the keys.
             A symbol table implements the <span class="code">Associative array</span> abstraction:
             when associating a value with a key that is already in the symbol table,
             the convention is to replace the old value with the new value.
             Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_52"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_52?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_53"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_53?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
             values cannot be <span class="code">null</span>. Setting the
             value associated with a key to <span class="code">null</span> is equivalent to deleting the key
             from the symbol table.</p><p>
             This implementation uses a separate chaining hash table. It requires that
             the key type overrides the <span class="code">Equals()</span> and <span class="code">GetHashCode()</span> methods.
             The expected time per <span class="code">Put</span>, <span class="code">Contains</span>, or <span class="code">Remove</span>
             operation is constant, subject to the uniform hashing assumption.
             The <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
             Construction takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_SequentialSearchST_2.htm">SequentialSearchST<span id="LSTFAD1909E_54"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_54?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key, Value<span id="LSTFAD1909E_55"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_55?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
            The <span class="code">SequentialSearchST</span> class represents an (unordered)
            symbol table of generic key-value pairs.
            It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Indexer</span>, <span class="code">Contains</span>,
            <span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
            It also provides a <span class="code">Keys</span> method for iterating over all of the keys.
            A symbol table implements the <span class="code">Associative array</span> abstraction:
            when associating a value with a key that is already in the symbol table,
            the convention is to replace the old value with the new value.
            The class also uses the convention that values cannot be <span class="code">null</span>. Setting the
            value associated with a key to <span class="code">null</span> is equivalent to deleting the key
            from the symbol table.
            </p><p>
            This implementation uses a singly-linked list and sequential search.
            It relies on the <span class="code">Equals()</span> method to test whether two keys
            are equal. It does not call either the <span class="code">CompareTo()</span> or
            <span class="code">GetHashCode()</span> method.
            The <span class="code">Put</span> and <span class="code">Delete</span> operations take linear time; the
            <span class="code">Get</span> and <span class="code">Contains</span> operations takes linear time in the worst case.
            The <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
            Construction takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_SET_1.htm">SET<span id="LSTFAD1909E_56"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_56?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key<span id="LSTFAD1909E_57"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_57?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">SET</span> class represents an ordered set of comparable keys.
             It supports the usual <span class="code">Add</span>, <span class="code">Contains</span>, and <span class="code">Delete</span>
             methods. It also provides ordered methods for finding the <span class="code">Minimum</span>,
             <span class="code">Maximum</span>, <span class="code">Floor</span>, and <span class="code">Ceiling</span> and set methods
             for <span class="code">Union</span>, <span class="code">Intersection</span>, and <span class="code">Equality</span>.
             </p><p>
             Even though this implementation include the method <span class="code">Equals()</span>, it
             does not support the method <span class="code">GetHashCode()</span> because sets are mutable.
             </p><p>
             This implementation requires that
             the key type implements the <span class="code">Comparable</span> interface and calls the
             <span class="code">CompareTo()</span> and method to compare two keys. It does not call either
             <span class="code">Equals()</span> or <span class="code">GetHashCode()</span>.
             The <span class="code">Add</span>, <span class="code">Contains</span>, <span class="code">Delete</span>, <span class="code">Minimum</span>,
             <span class="code">Maximum</span>, <span class="code">Ceiling</span>, and <span class="code">Floor</span> methods take
             logarithmic time in the worst case.
             The <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
             Construction takes constant time.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Shell.htm">Shell</a></td><td><div class="summary">
             The <span class="code">Shell</span> class provides static methods for sorting an
             array using Shellsort with Knuth's increment sequence (1, 4, 13, 40, ...).</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_SparseVector.htm">SparseVector</a></td><td><div class="summary"><p>
             The <span class="code">SparseVector</span> class represents a <span class="code">D</span>-dimensional mathematical vector.
             Vectors are mutable: their values can be changed after they are created.
             It includes methods for addition, subtraction,
             dot product, scalar product, unit vector, and Euclidean norm.
             </p><p>
             The implementation is a symbol table of indices and values for which the vector
             coordinates are nonzero. This makes it efficient when most of the vector coordindates
             are zero. See also  for an immutable (dense) vector data type.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_ST_2.htm">ST<span id="LSTFAD1909E_58"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_58?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key, Value<span id="LSTFAD1909E_59"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_59?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">ST</span> class represents an ordered symbol table of generic
             key-value pairs.
             It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Contains</span>, <span class="code">Indexer</span><span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
             It also provides ordered methods for finding the <span class="code">Minimum</span>,
             <span class="code">Maximum</span>, <span class="code">Floor</span>, and <span class="code">Ceiling</span>.
             It also provides a <span class="code">Keys</span> method for iterating over all of the keys.
             A symbol table implements the <span class="code">Associative array</span> abstraction:
             when associating a value with a key that is already in the symbol table,
             the convention is to replace the old value with the new value.
             Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_60"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_60?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_61"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_61?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
             values cannot be <span class="code">null</span>. Setting the
             value associated with a key to <span class="code">null</span> is equivalent to deleting the key
             from the symbol table.</p><p>
             This implementation uses a balanced binary search tree. It requires that
             the key type implements the <span class="code">IComparable</span> interface and calls the
             <span class="code">CompareTo()</span> and method to compare two keys. It does not call either
             <span class="code">Equals()</span> or <span class="code">GetHashCode()</span>.
             The <span class="code">Put</span>, <span class="code">Contains</span>, <span class="code">Remove</span>, <span class="code">Minimum</span>,
             <span class="code">Maximum</span>, <span class="code">Ceiling</span>, and <span class="code">Floor</span> operations each take
             logarithmic time in the worst case.
             The <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
             Construction takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_StaticSETofInts.htm">StaticSETofInts</a></td><td><div class="summary"><p>
             The <span class="code">StaticSETofInts</span> class represents a set of integers.
             It supports searching for a given integer is in the set. It accomplishes
             this by keeping the set of integers in a sorted array and using
             binary search to find the given integer.</p><p>The <span class="code">Rank</span> and <span class="code">Contains</span> operations take
             logarithmic time in the worst case.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_StdRandom.htm">StdRandom</a></td><td><div class="summary">
             The <span class="code">StdRandom</span> class provides static methods for generating
             random number from various discrete and continuous distributions,
             including Bernoulli, uniform, Gaussian, exponential, pareto,
             Poisson, and Cauchy. It also provides method for shuffling an
             array or subarray.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Stopwatch.htm">Stopwatch</a></td><td><div class="summary">
             The <span class="code">Stopwatch</span> data type is for measuring the time that elapses 
             between the start and end of a programming task (wall-clock time). 
             For an alternative, see <a href="T_Algs4Net_StopwatchWin32.htm">StopwatchWin32</a>.
             </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_StopwatchWin32.htm">StopwatchWin32</a></td><td><div class="summary">
            A version of Stopwatch that uses Win32 performance counter.
            For regular use, use the <a href="T_Algs4Net_Stopwatch.htm">Stopwatch</a> class. Since .NET dose not have
            a close equivalence of the Java ThreadMXBean class, we will not port the  
            <a href="http://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StopwatchCPU.java.html">StopwatchCPU</a>
            class. Instead, we use this class as a demonstration of an alternative Stopwatch implementation.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_SuffixArray.htm">SuffixArray</a></td><td><div class="summary"><p>
             The <span class="code">SuffixArray</span> class represents a suffix array of a string of
             length <span class="code">N</span>.
             It supports the <span class="code">Selecting</span> the <span class="code">I</span>th smallest suffix,
             getting the <span class="code">Index</span> of the <span class="code">I</span>th smallest suffix,
             computing the length of the <span class="code">Longest common prefix</span> between the
             <span class="code">I</span>th smallest suffix and the <span class="code">I</span>-1st smallest suffix,
             and determining the <span class="code">Rank</span> of a query string (which is the number
             of suffixes strictly less than the query string).</p><p>
             This implementation uses a nested class <span class="code">Suffix</span> to represent
             a suffix of a string (using constant time and space) and
             <span class="code">Array.Sort()</span> to sort the array of suffixes.
             The <span class="code">Index</span> and <span class="code">Length</span> operations takes constant time 
             in the worst case. The <span class="code">Lcp</span> operation takes time proportional to the
             length of the longest common prefix.
             The <span class="code">Select</span> operation takes time proportional
             to the length of the suffix and should be used primarily for debugging.
             </p><p>For alternate implementations of the same API, see
             , which is faster in practice (uses 3-way radix quicksort)
             and uses less memory (does not create <span class="code">Suffix</span> objects)</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_SuffixArrayX.htm">SuffixArrayX</a></td><td><div class="summary"><p>
             The <span class="code">SuffixArrayX</span> class represents a suffix array of a string of
             length <span class="code">N</span>.
             It supports the <span class="code">Selecting</span> the <span class="code">I</span>th smallest suffix,
             getting the <span class="code">Index</span> of the <span class="code">I</span>th smallest suffix,
             computing the length of the <span class="code">Longest common prefix</span> between the
             <span class="code">I</span>th smallest suffix and the <span class="code">I</span>-1st smallest suffix,
             and determining the <span class="code">Rank</span> of a query string (which is the number
             of suffixes strictly less than the query string).
             </p><p>
             This implementation uses 3-way radix quicksort to sort the array of suffixes.
             For a simpler (but less efficient) implementations of the same API, see
             .
             The <span class="code">Index</span> and <span class="code">Length</span> operations takes constant time
             in the worst case. The <span class="code">Lcp</span> operation takes time proportional to the
             length of the longest common prefix.
             The <span class="code">Select</span> operation takes time proportional
             to the length of the suffix and should be used primarily for debugging.
             </p><p>
             This implementation uses '\0' as a sentinel and assumes that the charater
             '\0' does not appear in the text.
             </p><p>
             In practice, this algorithm runs very fast. However, in the worst-case
             it can be very poor (e.g., a string consisting of N copies of the same
             character. We do not shuffle the array of suffixes before sorting because
             shuffling is relatively expensive and a pathologial input for which 
             the suffixes start out in a bad order (e.g., sorted) is likely to be
             a bad input for this algorithm with or without the shuffle.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_SymbolDigraph.htm">SymbolDigraph</a></td><td><div class="summary"><p>
             The <span class="code">SymbolDigraph</span> class represents a digraph, where the
             vertex names are arbitrary strings.
             By providing mappings between string vertex names and integers,
             it serves as a wrapper around the
              data type, which assumes the vertex names are integers
             between 0 and <span class="code">V</span> - 1.
             It also supports initializing a symbol digraph from a file.
             </p><p>
             This implementation uses an  to map from strings to integers,
             an array to map from integers to strings, and a  to store
             the underlying graph.
             The <span class="code">Index</span> and <span class="code">Contains</span> operations take time 
             proportional to log <span class="code">V</span>, where <span class="code">V</span> is the number of vertices.
             The <span class="code">Name</span> operation takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_SymbolGraph.htm">SymbolGraph</a></td><td><div class="summary"><p>
             The <span class="code">SymbolGraph</span> class represents an undirected graph, where the
             vertex names are arbitrary strings.
             By providing mappings between string vertex names and integers,
             it serves as a wrapper around the
              data type, which assumes the vertex names are integers
             between 0 and <span class="code">V</span> - 1.
             It also supports initializing a symbol graph from a file.
             </p><p>
             This implementation uses an  to map from strings to integers,
             an array to map from integers to strings, and a  to store
             the underlying graph.
             The <span class="code">Index</span> and <span class="code">Contains</span> operations take time 
             proportional to log <span class="code">V</span>, where <span class="code">V</span> is the number of vertices.
             The <span class="code">Name</span> operation takes constant time.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TarjanSCC.htm">TarjanSCC</a></td><td><div class="summary"><p>
             The <span class="code">TarjanSCC</span> class represents a data type for
             determining the strong components in a digraph.
             The <span class="code">Id</span> operation determines in which strong component
             a given vertex lies; the <span class="code">AreStronglyConnected</span> operation
             determines whether two vertices are in the same strong component;
             and the <span class="code">Count</span> operation determines the number of strong
             components.</p><p>
             The <span class="code">Component identifier</span> of a component is one of the
             vertices in the strong component: two vertices have the same component
             identifier if and only if they are in the same strong component.
             </p><p>
             This implementation uses Tarjan's algorithm.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>
             (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">Id</span>, <span class="code">Count</span>, and <span class="code">AreStronglyConnected</span>
             operations take constant time.
             For alternate implementations of the same API, see
              and .
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TextInput.htm">TextInput</a></td><td><div class="summary"><p>
             The <span class="code">TextInput</span> class provides static methods for reading strings
             and numbers from standard input. It mimics the Java's Scanner class
             and adapt from the <span class="code">StdIn</span> class from the textbook.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_ThreeSum.htm">ThreeSum</a></td><td><div class="summary"><p>
             The <span class="code">ThreeSum</span> class provides static methods for counting
             and printing the number of triples in an array of integers that sum to 0
             (ignoring integer overflow).</p><p>
             This implementation uses a triply nested loop and takes proportional to N^3,
             where N is the number of integers.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_ThreeSumFast.htm">ThreeSumFast</a></td><td><div class="summary"><p>
             The <span class="code">ThreeSumFast</span> class provides static methods for counting
             and printing the number of triples in an array of distinct integers that
             sum to 0 (ignoring integer overflow).
             </p><p>
             This implementation uses sorting and binary search and takes time
             proportional to N^2 log N, where N is the number of integers.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TopM.htm">TopM</a></td><td><div class="summary">
             The <span class="code">TopM</span> class provides a client that reads a sequence of
             transactions from standard input and prints the <span class="code">M</span> largest ones
             to standard output. This implementation uses a <a href="T_Algs4Net_MinPQ_1.htm">MinPQ<span id="LSTFAD1909E_62"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_62?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Key<span id="LSTFAD1909E_63"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_63?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> of size
             at most <span class="code">M</span> + 1 to identify the <span class="code">M</span> largest transactions
             and a <a href="T_Algs4Net_LinkedStack_1.htm">LinkedStack<span id="LSTFAD1909E_64"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_64?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Item<span id="LSTFAD1909E_65"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_65?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> to output them in the proper order.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Topological.htm">Topological</a></td><td><div class="summary"><p>
             The <span class="code">Topological</span> class represents a data type for
             determining a topological order of a directed acyclic graph (DAG).
             Recall, a digraph has a topological order if and only if it is a DAG.
             The <span class="code">HasOrder</span> operation determines whether the digraph has
             a topological order, and if so, the <span class="code">Order</span> operation
             returns one.</p><p>This implementation uses depth-first search.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span> (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">HasOrder</span> and <span class="code">Rank</span> operations takes constant time;
             the <span class="code">Order</span> operation takes time proportional to <span class="code">V</span>.</p><p>
             See , , and
              to compute a
             directed cycle if the digraph is not a DAG. Also, see 
              for a nonrecursive queue-based algorithm
             to compute a topological order of a DAG.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TopologicalX.htm">TopologicalX</a></td><td><div class="summary"><p>
             The <span class="code">TopologicalX</span> class represents a data type for
             determining a topological order of a directed acyclic graph (DAG).
             Recall, a digraph has a topological order if and only if it is a DAG.
             The <span class="code">HasOrder</span> operation determines whether the digraph has
             a topological order, and if so, the <span class="code">Order</span> operation
             returns one.
             </p><p>
             This implementation uses a nonrecursive, queue-based algorithm.
             The constructor takes time proportional to <span class="code">V</span> + <span class="code">E</span>
             (in the worst case),
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             Afterwards, the <span class="code">HasOrder</span> and <span class="code">Rank</span> operations takes constant time;
             the <span class="code">Order</span> operation takes time proportional to <span class="code">V</span>.
             </p><p>
             See , , and
              to compute a
             directed cycle if the digraph is not a DAG.
             See  for a recursive version that uses depth-first search.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Transaction.htm">Transaction</a></td><td><div class="summary">
             The <span class="code">Transaction</span> class is an immutable data type to encapsulate a
             commercial transaction with a customer name, date, and amount.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Transaction_HowMuchOrder.htm">Transaction<span id="LSTFAD1909E_66"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_66?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>HowMuchOrder</a></td><td><div class="summary">
            Compares two transactions by amount.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Transaction_WhenOrder.htm">Transaction<span id="LSTFAD1909E_67"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_67?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>WhenOrder</a></td><td><div class="summary">
            Compares two transactions by date.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Transaction_WhoOrder.htm">Transaction<span id="LSTFAD1909E_68"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_68?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>WhoOrder</a></td><td><div class="summary">
            Compares two transactions by customer name.
            </div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TransitiveClosure.htm">TransitiveClosure</a></td><td><div class="summary"><p>
             The <span class="code">TransitiveClosure</span> class represents a data type for
             computing the transitive closure of a digraph.
             </p><p>This implementation runs depth-first search from each vertex.
             The constructor takes time proportional to <span class="code">V</span>(<span class="code">V</span> + <span class="code">E</span>)
             (in the worst case) and uses space proportional to <span class="code">V</span><sup>2</sup>,
             where <span class="code">V</span> is the number of vertices and <span class="code">E</span> is the number of edges.
             </p><p>For large digraphs, you may want to consider a more sophisticated algorithm.
             <a href="http://www.cs.hut.fi/~enu/thesis.html">Nuutila</a> proposes two
             algorithm for the problem (based on strong components and an interval representation)
             that runs in <span class="code">E</span> + <span class="code">V</span> time on typical digraphs.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TrieSET.htm">TrieSET</a></td><td><div class="summary"><p>
             The <span class="code">TrieSET</span> class represents an ordered set of strings over
             the extended ASCII alphabet.
             It supports the usual <span class="code">Add</span>, <span class="code">Contains</span>, and <span class="code">Delete</span>
             methods. It also provides character-based methods for finding the string
             in the set that is the <span class="code">Longest prefix</span> of a given prefix,
             finding all strings in the set that <span class="code">Start with</span> a given prefix,
             and finding all strings in the set that <span class="code">Match</span> a given pattern.
             </p><p>
             This implementation uses a 256-way trie.
             The <span class="code">Add</span>, <span class="code">Contains</span>, <span class="code">Delete</span>, and
             <span class="code">Longest prefix</span> methods take time proportional to the length
             of the key (in the worst case). Construction takes constant time.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TrieST_1.htm">TrieST<span id="LSTFAD1909E_69"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_69?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Value<span id="LSTFAD1909E_70"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_70?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>
             The <span class="code">TrieST</span> class represents an symbol table of key-value
             pairs, with string keys and generic values.
             It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Indexer</span>, <span class="code">Contains</span>,
             <span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
             It also provides character-based methods for finding the string
             in the symbol table that is the <span class="code">Longest prefix</span> of a given prefix,
             finding all strings in the symbol table that <span class="code">Start with</span> a given prefix,
             and finding all strings in the symbol table that <span class="code">Match</span> a given pattern.
             A symbol table implements the <span class="code">Associative array</span> abstraction:
             when associating a value with a key that is already in the symbol table,
             the convention is to replace the old value with the new value.
             Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_71"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_71?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_72"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_72?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
             values cannot be <span class="code">null</span>. Setting the value associated with a 
             key to <span class="code">null</span> is equivalent to deleting the key from the symbol table.</p><p>This implementation uses a 256-way trie. The <span class="code">Put</span>, <span class="code">Contains</span>, 
             <span class="code">Delete</span>, and <span class="code">Longest prefix</span> operations take time proportional to 
             the length of the key (in the worst case). Construction takes constant time.
             The <span class="code">Count</span>, and <span class="code">IsEmpty</span> operations take constant time.
             Construction takes constant time.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TST_1.htm">TST<span id="LSTFAD1909E_73"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_73?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Value<span id="LSTFAD1909E_74"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_74?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></td><td><div class="summary"><p>The <span class="code">TST</span> class represents an symbol table of key-value
             pairs, with string keys and generic values.
             It supports the usual <span class="code">Put</span>, <span class="code">Get</span>, <span class="code">Indexer</span>, <span class="code">Contains</span>,
             <span class="code">Delete</span>, <span class="code">Count</span>, and <span class="code">IsEmpty</span> methods.
             It also provides character-based methods for finding the string
             in the symbol table that is the <span class="code">Longest prefix</span> of a given prefix,
             finding all strings in the symbol table that <span class="code">Start with</span> a given prefix,
             and finding all strings in the symbol table that <span class="code">Match</span> a given pattern.
             A symbol table implements the <span class="code">Associative array</span> abstraction:
             when associating a value with a key that is already in the symbol table,
             the convention is to replace the old value with the new value.
             Unlike <a href="http://msdn2.microsoft.com/en-us/library/xfhwa508" target="_blank">Dictionary<span id="LSTFAD1909E_75"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_75?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TKey, TValue<span id="LSTFAD1909E_76"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFAD1909E_76?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>, this class uses the convention that
             values cannot be <span class="code">null</span>. Setting the
             value associated with a key to <span class="code">null</span> is equivalent to deleting the key
             from the symbol table.</p><p>
             This implementation uses a ternary search trie.</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_TwoPersonZeroSumGame.htm">TwoPersonZeroSumGame</a></td><td><div class="summary"><p>
             The <span class="code">TwoPersonZeroSumGame</span> class represents a data type for
             computing optimal row and column strategies to two-person zero-sum games.
             </p><p>
             This implementation solves an <span class="code">M</span>-by-<span class="code">N</span> two-person
             zero-sum game by reducing it to a linear programming problem.
             Assuming the payoff matrix <span class="code">A</span> is strictly positive, the
             optimal row and column player strategies x* and y* are obtained
             by solving the following primal and dual pair of linear programs,
             scaling the results to be probability distributions.
             </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAEBDA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAEBDA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAEBDA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">(P)  max  y^T <span class="highlight-number">1</span>         (D)  min   <span class="highlight-number">1</span>^T x
     s.t  A^T y &lt;= <span class="highlight-number">1</span>         s.t   A x &gt;= <span class="highlight-number">1</span>
              y &gt;= <span class="highlight-number">0</span>                 x &gt;= <span class="highlight-number">0</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAEBDA");</script><p>
             If the payoff matrix <span class="code">A</span> has any negative entries, we add
             the same constant to every entry so that every entry is positive.
             This increases the value of the game by that constant, but does not
             change solutions to the two-person zero-sum game.
             </p><p>
             This implementation is not suitable for large inputs, as it calls
             a bare-bones linear programming solver that is neither fast nor
             robust with respect to floating-point roundoff error.
             </p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_UF.htm">UF</a></td><td><div class="summary"><p>
             The <span class="code">UF</span> class represents a <span class="code">Union-Find data type</span>
             (also known as the <span class="code">Disjoint-sets data type</span>).
             It supports the <span class="code">Union</span> and <span class="code">Find</span> operations,
             along with a <span class="code">Connected</span> operation for determining whether
             two sites are in the same component and a <span class="code">Count</span> operation that
             returns the total number of components.
             </p><p>
             This implementation uses weighted quick union by rank with path compression
             by halving.
             Initializing a data structure with <span class="code">N</span> sites takes linear time.
             Afterwards, the <span class="code">Union</span>, <span class="code">Find</span>, and <span class="code">Connected</span>
             operations take logarithmic time (in the worst case) and the
             <span class="code">Count</span> operation takes constant time.
             Moreover, the amortized time per <span class="code">Union</span>, <span class="code">Find</span>,
             and <span class="code">Connected</span> operation has inverse Ackermann complexity.
             For alternate implementations of the same API, see
             .</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_Vector.htm">Vector</a></td><td><div class="summary">
             The <span class="code">Vector</span> class represents a <span class="code">D</span>-dimensional Euclidean vector.
             Vectors are immutable: their values cannot be changed after they are created.
             It includes methods for addition, subtraction,
             dot product, scalar product, unit vector, Euclidean norm, and the Euclidean
             distance between two vectors.</div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_WeightedQuickUnionUF.htm">WeightedQuickUnionUF</a></td><td><div class="summary"><p>
             The <span class="code">WeightedQuickUnionUF</span> class represents a <span class="code">Union-Find data type</span>
             (also known as the <span class="code">Disjoint-sets data type</span>).
             It supports the <span class="code">Union</span> and <span class="code">Find</span> operations,
             along with a <span class="code">Connected</span> operation for determining whether
             two sites are in the same component and a <span class="code">Count</span> operation that
             returns the total number of components.</p><p>
             This implementation uses weighted quick union by size (without path compression).
             Initializing a data structure with <span class="code">N</span> sites takes linear time.
             Afterwards, the <span class="code">Union</span>, <span class="code">Find</span>, and <span class="code">Connected</span>
             operations  take logarithmic time (in the worst case) and the
             <span class="code">Count</span> operation takes constant time.
             For alternate implementations of the same API, see .</p></div></td></tr><tr data="class; public"><td><img src="../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_Algs4Net_WhiteFilter.htm">WhiteFilter</a></td><td><div class="summary">
             The <span class="code">WhiteFilter</span> class provides a client for reading in a <span class="code">Whitelist</span>
             of words from a file; then, reading in a sequence of words from standard input,
             printing out each word that appears in the file.
             It is useful as a test client for various symbol table implementations.
             </div></td></tr></table></div></div></div><div id="pageFooter" class="pageFooter"> </div></body><script type="text/javascript">
<!--
    var tocNav = document.getElementById("tocNav");
    var anchor = tocNav.children[0].children[0];
    Toggle(anchor);
    tocNav.children[0].className += " current";
-->
</script>
</html>